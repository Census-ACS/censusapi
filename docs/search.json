[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, interest fostering open welcoming community, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality. Examples unacceptable behavior participants include: use sexualized language imagery Personal attacks Trolling insulting/derogatory comments Public private harassment Publishing ’s private information, physical electronic addresses, without explicit permission unethical unprofessional conduct Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. adopting Code Conduct, project maintainers commit fairly consistently applying principles every aspect managing project. Project maintainers follow enforce Code Conduct may permanently removed project team. code conduct applies within project spaces public spaces individual representing project community. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.2.0, available https://www.contributor-covenant.org/version/1/2/0/code--conduct.html","code":""},{"path":[]},{"path":"/articles/example-masterlist.html","id":"acs-detailed-tables","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Detailed Tables","title":"Example masterlist","text":"Get median household income, associated annotations margin error, census tracts Alaska.","code":"acs_income <- getCensus(     name = \"acs/acs5\",     vintage = 2019,      vars = c(\"NAME\", \"B19013_001E\", \"B19013_001EA\", \"B19013_001M\", \"B19013_001MA\"),      region = \"tract:*\",     regionin = \"state:02\") head(acs_income)"},{"path":"/articles/example-masterlist.html","id":"acs-subject-tables","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Subject Tables","title":"Example masterlist","text":"Get percent people without internet subscription income five counties New York City, associated margins error: overall: S2801_C02_019E income less $20,000: S2801_C02_023E income $20,000 $74,999: S2801_C02_027E income $75,000 greater: S2801_C02_031E","code":"acs_subject <- getCensus(     name = \"acs/acs1/subject\",     vintage = 2018,      vars = c(\"NAME\", \"S2801_C02_019E\", \"S2801_C02_019M\",                      \"S2801_C02_023E\", \"S2801_C02_023M\",                       \"S2801_C02_027E\", \"S2801_C02_027M\",                      \"S2801_C02_031E\", \"S2801_C02_031M\"),      region = \"county:005,047,061,081,085\",     regionin = \"state:36\") head(acs_subject)"},{"path":"/articles/example-masterlist.html","id":"acs-data-profile","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Data Profile","title":"Example masterlist","text":"","code":"acs_profile <- getCensus(     name = \"acs/acs1/profile\",     vintage = 2019,      vars = \"group(DP05)\",      region = \"region:*\")"},{"path":"/articles/example-masterlist.html","id":"acs-comparison-profiles","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Comparison Profiles","title":"Example masterlist","text":"Get annaul median household income constant 2019 dollars Alabama cities past five years.","code":"acs_comparison <- getCensus(     name = \"acs/acs1/cprofile\",     vintage = 2019,      vars = c(\"NAME\", \"CP03_2015_062E\", \"CP03_2016_062E\", \"CP03_2017_062E\", \"CP03_2018_062E\"),      region = \"place:*\",     regionin = \"state:01\") head(acs_comparison)"},{"path":"/articles/example-masterlist.html","id":"acs-migration-flows","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Migration Flows","title":"Example masterlist","text":"American Community Survey Migration Flows documentation","code":"flows <- getCensus(     name = \"acs/flows\",     vintage = 2016,     vars = c(\"MOVEDIN\", \"MOVEDOUT\", \"FULL1_NAME\", \"FULL2_NAME\", \"GEOID2\"),     region = \"county:001\",     regionin = \"state:01\") head(flows)"},{"path":"/articles/example-masterlist.html","id":"american-community-survey-language-statistics","dir":"Articles","previous_headings":"American Community Survey","what":"American Community Survey Language Statistics","title":"Example masterlist","text":"American Community Survey Language Statistics documentation Get number people New York state speak language.","code":"languages <- getCensus(     name = \"language\",     vintage = 2013,     vars = c(\"EST\", \"LAN\", \"LANLABEL\"),     region = \"state:36\") head(languages)"},{"path":"/articles/example-masterlist.html","id":"annual-survey-of-entrepreneurs","dir":"Articles","previous_headings":"","what":"Annual Survey of Entrepreneurs","title":"Example masterlist","text":"Annual Survey Entrepreneurs documentation","code":"ase_csa <- getCensus(     name = \"ase/csa\",     vintage = 2014,     vars = c(\"GEO_TTL\", \"NAICS2012\", \"NAICS2012_TTL\", \"EMPSZFI\", \"EMPSZFI_TTL\", \"FIRMPDEMP\"),     region = \"us:*\") head(ase_csa) ase_cscb <- getCensus(     name = \"ase/cscb\",     vintage = 2014,     vars = c(\"GEO_TTL\", \"NAICS2012_TTL\", \"ASECB\", \"ASECB_TTL\", \"SPOUSES\", \"SPOUSES_TTL\", \"YEAR\",                       \"FIRMPDEMP\", \"FIRMPDEMP_PCT\", \"RCPPDEMP\", \"RCPPDEMP_F\", \"RCPPDEMP_PCT\",                       \"EMP\", \"EMP_PCT\", \"PAYANN\", \"PAYANN_PCT\", \"FIRMPDEMP_S\", \"FIRMPDEMP_PCT_S\",                       \"RCPPDEMP_S\", \"RCPPDEMP_PCT_S\", \"EMP_S\", \"EMP_PCT_S\", \"PAYANN_S\", \"PAYANN_PCT_S\"),     region = \"us:*\") head(ase_cscb) ase_cscbo <- getCensus(     name = \"ase/cscbo\",     vintage = 2014,     vars = c(\"GEO_TTL\", \"NAICS2012_TTL\", \"ASECBO\", \"ASECBO_TTL\", \"ACQBUS\", \"ACQBUS_TTL\",                       \"YEAR\", \"OWNPDEMP\", \"OWNPDEMP_PCT\", \"OWNPDEMP_S\", \"OWNPDEMP_PCT_S\"),     region = \"us:*\") head(ase_cscbo)"},{"path":"/articles/example-masterlist.html","id":"annual-survey-of-manufactures","dir":"Articles","previous_headings":"","what":"Annual Survey of Manufactures","title":"Example masterlist","text":"Annual Survey Manufactures documentation","code":"asm_state <- getCensus(     name = \"timeseries/asm/state\",     vars = c(\"GEO_TTL\", \"NAICS_TTL\", \"EMP\"),     region = \"state:*\",     time = 2016,     naics = \"31-33\") head(asm_state) asm_product <- getCensus(     name = \"timeseries/asm/product\",     vars = c(\"PSCODE_TTL\", \"GEO_TTL\", \"PRODVAL\"),     region = \"us:*\",     time = 2016,     pscode = 311111) head(asm_product)"},{"path":"/articles/example-masterlist.html","id":"county-business-patterns-and-nonemployer-statistics","dir":"Articles","previous_headings":"","what":"County Business Patterns and Nonemployer Statistics","title":"Example masterlist","text":"County Business Patterns Nonemployer Statistics documentation","code":""},{"path":"/articles/example-masterlist.html","id":"county-business-patterns","dir":"Articles","previous_headings":"County Business Patterns and Nonemployer Statistics","what":"County Business Patterns","title":"Example masterlist","text":"County Business Patterns documentation Get employment data construction industry. Get employment data state companies 1,000 employees.","code":"cbp_2018 <- getCensus(     name = \"cbp\",     vintage = 2018,     vars = c(\"EMP\", \"ESTAB\"),     region = \"state:*\",     NAICS2017 = 23) head(cbp_2018) cbp_2008 <- getCensus(     name = \"cbp\",     vintage = 2008,     vars = c(\"YEAR\", \"GEO_TTL\", \"EMPSZES_TTL\", \"EMP\", \"ESTAB\", \"PAYANN\"),     region = \"state:*\",     EMPSZES = 260) head(cbp_2008)"},{"path":"/articles/example-masterlist.html","id":"zip-codes-business-patterns","dir":"Articles","previous_headings":"County Business Patterns and Nonemployer Statistics","what":"Zip Codes Business Patterns","title":"Example masterlist","text":"Zip Codes Business Patterns documentation","code":"zbp_2018 <- getCensus(     name = \"zbp\",     vintage = 2018,     vars = c(\"EMP\", \"ESTAB\", \"EMPSZES\"),     region = \"zipcode:90210\") head(zbp_2018)"},{"path":"/articles/example-masterlist.html","id":"nonemployer-statistics","dir":"Articles","previous_headings":"County Business Patterns and Nonemployer Statistics","what":"Nonemployer statistics","title":"Example masterlist","text":"Nonemployer statistics documentation","code":"nonemp <- getCensus(     name = \"nonemp\",     vintage = 2016,     vars = c(\"GEO_TTL\", \"NRCPTOT\", \"NAICS2012_TTL\"),     region = \"state:*\",     naics2012 = 54) head(nonemp)"},{"path":"/articles/example-masterlist.html","id":"decennial-census","dir":"Articles","previous_headings":"","what":"Decennial Census","title":"Example masterlist","text":"Decennial Census documentation Total population housing units metropolitan/micropolitan statistical areas 2010. Get urban/rural status group variables (P2) metropolitan/micropolitan statistical areas 2010. Get 2010 population block group within specific tract.","code":"data2010 <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = c(\"NAME\", \"P001001\", \"H010001\"),      region = \"metropolitan statistical area/micropolitan statistical area:*\") head(data2010) # Show variable metadata for the P2 group group_p2 <- listCensusMetadata(     name = \"dec/sf1\",     vintage = 2010,     type = \"variables\",     group = \"P2\")  # Get the P2 variable group (URBAN AND RURAL) data2010 <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = \"group(P2)\",      region = \"metropolitan statistical area/micropolitan statistical area:*\") head(data2010) tract_pop <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = \"P001001\",      region = \"block:*\",     regionin = \"state:36+county:027+tract:010000\") head(tract_pop)"},{"path":"/articles/example-masterlist.html","id":"decennial-census-self-response-rates","dir":"Articles","previous_headings":"Decennial Census","what":"Decennial Census Self-Response Rates","title":"Example masterlist","text":"Decennial Census Self-Response Rates documentation Get self-response rates 2020 2010 Decennial Census state, county, tract, place . Get overall internet reponse rates counties. Get response rates places (cities, towns, etc) within New York state. Get final 2010 Decennial Census self-response rates.","code":"county_responses <- getCensus(     name = \"dec/responserate\",     vintage = 2020,     vars = c(\"NAME\", \"RESP_DATE\", \"CRRALL\", \"CRRINT\"),     region = \"county:*\") head(county_responses) ny_place_responses <- getCensus(     name = \"dec/responserate\",     vintage = 2020,     vars = c(\"NAME\", \"RESP_DATE\", \"CRRALL\", \"CRRINT\"),     region = \"place:*\",     regionin = \"state:36\") head(ny_place_responses) county_responses_2010 <- getCensus(     name = \"dec/responserate\",     vintage = 2010,     vars = c(\"NAME\", \"FSRR2010\"),     region = \"county:*\") head(county_responses_2010)"},{"path":"/articles/example-masterlist.html","id":"decennial-census-surname-files","dir":"Articles","previous_headings":"Decennial Census","what":"Decennial Census Surname Files","title":"Example masterlist","text":"Decennial Census Surname documentation Get counts top 25 popular surnames share race.","code":"top_surnames <- getCensus(     name = \"surname\",     vintage = 2010,     vars = c(\"NAME\", \"COUNT\", \"PROP100K\", \"PCTWHITE\", \"PCTBLACK\", \"PCTAIAN\", \"PCTAPI\", \"PCTHISPANIC\", \"PCT2PRACE\"),     RANK = \"1:25\") head(top_surnames)"},{"path":"/articles/example-masterlist.html","id":"economic-census","dir":"Articles","previous_headings":"","what":"Economic Census","title":"Example masterlist","text":"Economic Census documentation","code":"ewks_2012 <- getCensus(     name = \"ewks\",     vintage = 2012,     vars = c(\"EMP\", \"OPTAX\", \"GEOTYPE\"),     region = \"state:*\",     naics2012 = 54) head(ewks_2012) ewks_2007 <- getCensus(     name = \"ewks\",     vintage = 2007,     vars = c(\"EMP\", \"OPTAX\", \"GEOTYPE\"),     region = \"state:*\",     naics2007 = 54) head(ewks_2007)"},{"path":"/articles/example-masterlist.html","id":"economic-indicators","dir":"Articles","previous_headings":"","what":"Economic Indicators","title":"Example masterlist","text":"Economic Indicators documentation","code":"eits <- getCensus(     name = \"timeseries/eits/resconst\",     vars = c(\"cell_value\", \"data_type_code\", \"time_slot_id\", \"error_data\", \"category_code\", \"seasonally_adj\"),     region = \"us:*\",     time = \"from 2004-05 to 2012-12\") head(eits)"},{"path":"/articles/example-masterlist.html","id":"health-insurance-statistics","dir":"Articles","previous_headings":"","what":"Health Insurance Statistics","title":"Example masterlist","text":"Health Insurance Statistics documentation Get uninsured rate income group Alabama single year. Get uninsured rate Alabama multiple years. Get uninsured rate non-elderly adults incomes 138 400% poverty line, race state.","code":"sahie <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),     region = \"state:01\",     year = 2018) head(sahie) sahie_annual <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\"),     region = \"state:01\",     year = \"2006:2018\") sahie_annual sahie_nonelderly <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPR_DESC\", \"PCTUI_PT\", \"AGE_DESC\", \"RACECAT\", \"RACE_DESC\"),      region = \"state:*\",      year = 2018,     IPRCAT = 5,     AGECAT = 1) head(sahie_nonelderly)"},{"path":"/articles/example-masterlist.html","id":"international-data-base","dir":"Articles","previous_headings":"","what":"International Data Base","title":"Example masterlist","text":"International Data Base documentation Get Census Bureau projections 2020 populations life expectancy birth country. Get predictions population age 2050 Norway ages 10-18. https://api.census.gov/data/timeseries/idb/1year?get=AREA_KM2,NAME,AGE,POP&FIPS=&time=2050","code":"intl_pop <- getCensus(     name = \"timeseries/idb/5year\",     vars = c(\"NAME\", \"FIPS\", \"POP\", \"E0\"),     time = 2020) head(intl_pop) norway_pop <- getCensus(     name = \"timeseries/idb/1year\",     vars = c(\"NAME\", \"POP\"),     time = 2050,     FIPS = \"NO\",     AGE = \"10:18\") head(norway_pop)"},{"path":"/articles/example-masterlist.html","id":"international-trade","dir":"Articles","previous_headings":"","what":"International Trade","title":"Example masterlist","text":"International Trade documentation Note: international trade datasets buggy frequently give general error message “error running query. ’ve logged error ’ll correct ASAP. Sorry inconvenience.” error message comes U.S. Census Bureau. run repeated issues inconsistencies, contact Census Bureau help consider using bulk data download instead. Get general imports value imports consumption value end-use codes countries January 2018.","code":"imports <- getCensus(     name = \"timeseries/intltrade/imports/enduse\",     vars = c(\"CTY_CODE\", \"CTY_NAME\", \"I_ENDUSE\", \"I_ENDUSE_LDESC\", \"GEN_VAL_MO\", \"CON_VAL_MO\"),     time = \"2018-01\") head(imports)"},{"path":"/articles/example-masterlist.html","id":"population-estimates-and-projections","dir":"Articles","previous_headings":"","what":"Population Estimates and Projections","title":"Example masterlist","text":"Population Estimates Projections documentation","code":""},{"path":"/articles/example-masterlist.html","id":"population-estimates","dir":"Articles","previous_headings":"Population Estimates and Projections","what":"Population Estimates","title":"Example masterlist","text":"Population Estimates documentation Note variable names PEP APIs always consistent year year.","code":"popest <- getCensus(     name = \"pep/population\",     vintage = 2019,     vars = c(\"POP\", \"DATE_DESC\"),     region = \"state:*\") head(popest) popest_housing <- getCensus(     name = \"pep/housing\",     vintage = 2018,     vars = c(\"DATE_CODE\", \"DATE_DESC\", \"HUEST\"),     region = \"county:195\",     regionin = \"state:02\") head(popest_housing)"},{"path":"/articles/example-masterlist.html","id":"population-projections","dir":"Articles","previous_headings":"Population Estimates and Projections","what":"Population Projections","title":"Example masterlist","text":"Population Projections documentation","code":"popproj <- getCensus(     name = \"pep/projpop\",     vintage = 2014,     vars = c(\"YEAR\", \"POP\", \"AGE\"),     region = \"us:1\") head(popproj)"},{"path":"/articles/example-masterlist.html","id":"poverty-statistics","dir":"Articles","previous_headings":"","what":"Poverty Statistics","title":"Example masterlist","text":"Poverty Statistics documentation","code":""},{"path":"/articles/example-masterlist.html","id":"current-population-survey-poverty-statistics","dir":"Articles","previous_headings":"Poverty Statistics","what":"Current Population Survey Poverty Statistics","title":"Example masterlist","text":"Get national poverty rates race past 50 years.","code":"poverty <- getCensus(     name = \"timeseries/poverty/histpov2\",     vars = c(\"RACE\", \"PCTPOV\"),     region = \"us:*\",     time = \"from 1968 to 2019\") head(poverty)"},{"path":"/articles/example-masterlist.html","id":"small-area-income-and-poverty-estimates","dir":"Articles","previous_headings":"Poverty Statistics","what":"Small Area Income and Poverty Estimates","title":"Example masterlist","text":"Get poverty rate children overall single year. Get poverty rate children overall single county time.","code":"saipe <- getCensus(     name = \"timeseries/poverty/saipe\",     vars = c(\"NAME\", \"SAEPOVRT0_17_PT\", \"SAEPOVRTALL_PT\"),     region = \"state:*\",     year = 2019) head(saipe) saipe_years <- getCensus(     name = \"timeseries/poverty/saipe\",     vars = c(\"NAME\", \"SAEPOVRT0_17_PT\", \"SAEPOVRTALL_PT\"),     region = \"county:001\",     regionin = \"state:12\",     year = \"2000:2019\") head(saipe_years)"},{"path":"/articles/example-masterlist.html","id":"saipe-school-districts","dir":"Articles","previous_headings":"Poverty Statistics","what":"SAIPE School Districts","title":"Example masterlist","text":"Get number (SAEPOV5_17V_PT) rate (SAEPOVRAT5_17RV_PT) children ages 5-17 living poverty unified school districts Massachusetts.","code":"saipe_schools <- getCensus(     name = \"timeseries/poverty/saipe/schdist\",     vars = c(\"SD_NAME\", \"SAEPOV5_17V_PT\", \"SAEPOVRAT5_17RV_PT\"),     region = \"school district (unified):*\",     regionin = \"state:25\",     year = 2019) head(saipe_schools)"},{"path":"/articles/example-masterlist.html","id":"quarterly-workforce-indicators","dir":"Articles","previous_headings":"","what":"Quarterly Workforce Indicators","title":"Example masterlist","text":"Quarterly Workforce Indicators documentation allow simple calls specfic ones. Make sure read documentation closely. ’s simple call gets employment data county. Employment data time single state. ’s much specific call. Read Census Bureau’s documentation closely see options allowed QWI APIs.","code":"qwi_counties <- getCensus(     name = \"timeseries/qwi/sa\",     vars = c(\"Emp\", \"EarnBeg\"),     region = \"county:*\",     regionin = \"state:01\",     time = \"2016-Q1\") head(qwi_counties) qwi_time <- getCensus(     name = \"timeseries/qwi/sa\",     vars = c(\"Emp\", \"EarnBeg\"),     region = \"state:01\",     time = \"from 2007 to 2017\") head(qwi_time) qwi <- getCensus(     name = \"timeseries/qwi/sa\",     region = \"state:02\",     vars = c(\"Emp\", \"sex\"),     time = 2012,     quarter = 1,     agegrp = \"A07\",     ownercode = \"A05\",     firmsize = 1,     seasonadj = \"U\",     industry = 21) qwi"},{"path":"/articles/example-masterlist.html","id":"survey-of-business-owners","dir":"Articles","previous_headings":"","what":"Survey of Business Owners","title":"Example masterlist","text":"Survey Business Owners documentation","code":"# sbo <- getCensus( #   name = \"sbo\", #   vintage = 2012, #   vars = c(\"GEO_TTL\", \"RCPSZFI\", \"RCPSZFI_TTL\", \"FIRMPDEMP\"), #   region = \"state:*\") # head(sbo) #  # sbo_groups <- getCensus( #   name = \"sbo\", #   vintage = 2012, #   vars = c(\"GEO_TTL\", \"RACE_GROUP\", \"RACE_GROUP_TTL\", \"FIRMPDEMP\"), #   region = \"county:*\", #   regionin = \"state:09\") # head(sbo_groups)"},{"path":"/articles/example-masterlist.html","id":"the-planning-database","dir":"Articles","previous_headings":"","what":"The Planning Database","title":"Example masterlist","text":"Planning Database documentation Get population 2010 Census mail return rates block groups Autauga County, AL.","code":"pdb <- getCensus(     name = \"pdb/blockgroup\",     vintage = 2018,     vars = c(\"GIDBG\", \"County_name\", \"State_name\", \"Tot_Population_CEN_2010\", \"Mail_Return_Rate_CEN_2010\"),     region = \"block group:*\",     regionin = \"state:01+county:001\") head(pdb)"},{"path":"/articles/example-masterlist.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Example masterlist","text":"product uses Census Bureau Data API endorsed certified Census Bureau.","code":""},{"path":"/articles/getting-started.html","id":"api-key-setup","dir":"Articles","previous_headings":"","what":"API key setup","title":"Getting started with censusapi","text":"use Census APIs, sign API key. , ’re non-shared computer, add Census API key .Renviron profile call CENSUS_KEY. censusapi use default without extra work part. Within R, run: instances might want put key .Renviron - example, ’re shared school computer. can always choose specify key within getCensus instead.","code":"# Add key to .Renviron Sys.setenv(CENSUS_KEY=YOURKEYHERE) # Reload .Renviron readRenviron(\"~/.Renviron\") # Check to see that the expected key is output in your R console Sys.getenv(\"CENSUS_KEY\")"},{"path":"/articles/getting-started.html","id":"finding-your-api","dir":"Articles","previous_headings":"","what":"Finding your API","title":"Getting started with censusapi","text":"get started, load censusapi library. Census APIs 200 endpoints, covering dozens different datasets. see current table every available endpoint, run listCensusApis: returns useful information endpoint, including name, ’ll need make API call.","code":"library(censusapi) apis <- listCensusApis() View(apis)"},{"path":"/articles/getting-started.html","id":"using-getcensus","dir":"Articles","previous_headings":"","what":"Using getCensus","title":"Getting started with censusapi","text":"main function censusapi getCensus, makes API call given Census API returns data frame results. API slightly different parameters, always required arguments: name: name API defined Census, like “acs5” “timeseries/bds/firms” vintage: dataset year, generally required non-timeseries APIs vars: list variable names get region: geography level return, like state county APIs additional required optional arguments, like time, monthly, period. Check specific documentation API see options allowed. Let’s walk example getting uninsured rates income group using Small Area Health Insurance Estimates API, provides detailed annual state-level county-level estimates health insurance rates.","code":""},{"path":"/articles/getting-started.html","id":"choosing-variables","dir":"Articles","previous_headings":"Using getCensus","what":"Choosing variables","title":"Getting started with censusapi","text":"censusapi includes metadata function called listCensusMetadata get information API’s variable options geography options. Let’s see variables available SAHIE API: ’ll use variables get uninsured rates income group: IPRCAT: Income Poverty Ratio Category IPR_DESC: Income Poverty Ratio Category Description PCTUI_PT: Percent Uninsured Demographic Group Selected Income Range, Estimate NAME: Name geography returned (e.g. state county name)","code":"sahie_vars <- listCensusMetadata(     name = \"timeseries/healthins/sahie\",      type = \"variables\") head(sahie_vars)"},{"path":"/articles/getting-started.html","id":"choosing-regions","dir":"Articles","previous_headings":"Using getCensus","what":"Choosing regions","title":"Getting started with censusapi","text":"can also use listCensusMetadata see geographic levels can get data using SAHIE API. API three geographic levels: us, county within states, state. First, using getCensus, let’s get uninsured rate income group national level 2018. can also get data state level every state changing region \"state:*\": Finally, can get county-level data. geography metadata showed can choose get county-level data within states. ’ll use region specify county-level results regionin request data Alabama Alaska. SAHIE API timeseries (indicated name), can get multiple years data using year argument.","code":"listCensusMetadata(     name = \"timeseries/healthins/sahie\",      type = \"geography\") sahie_national <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),      region = \"us:*\",      year = 2018) sahie_national sahie_states <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),      region = \"state:*\",      year = 2018) head(sahie_states) sahie_counties <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),      region = \"county:*\",      regionin = \"state:01,02\",      year = 2018) head(sahie_counties, n=12L) sahie_years <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\"),      region = \"state:01\",      year = \"2006:2018\") head(sahie_years)"},{"path":"/articles/getting-started.html","id":"advanced-topics","dir":"Articles","previous_headings":"","what":"Advanced topics","title":"Getting started with censusapi","text":"package allows access full range U.S. Census Bureau’s APIs. API allows , can specify complicated geographies filter based range parameters. API little different, sure read documentation specific API ’re using. Also see examples example masterlist.","code":""},{"path":"/articles/getting-started.html","id":"miscellaneous-parameters","dir":"Articles","previous_headings":"Advanced topics","what":"Miscellaneous parameters","title":"Getting started with censusapi","text":"APIs allow complex calls, including specifying country FIPS code age. commonly used parameters, including time, date, sic included built-options getCensus, can also specify parameters . (Note: generally apply popular American Community Survey Decennial Census APIs.) SAHIE API, can filter data categorical variables AGECAT (age group), IPRCAT (income group), RACECAT (race) SEXCAT (sex), addition geography year. information variables available online documentation. ’s get uninsured rate (PCTUI_PT) non-elderly adults (AGECAT = 1) incomes 138 400% poverty line (IPRCAT = 5), race (RACECAT) state. Note: data race returned population large enough, states rows race groups. ’s another example, getting national data percent uninsured (PCTUI_PT) number uninsured (NUI_PT), along associated margins error, race group income group years. APIs can filtered . example, International Data Base population projections APIs allow get data age country. See variables IDB 1 year API allows: ’s simple call getting projected population age countries 2050. can make much specific call specifying FIPS AGE get just population projections teenagers Portugal. Quarterly Workforce Indicators APIs allow even specific calls. ’s one example:","code":"sahie_nonelderly <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\", \"IPR_DESC\", \"AGE_DESC\", \"RACECAT\", \"RACE_DESC\"),      region = \"state:*\",      year = 2018,     IPRCAT = 5,     AGECAT = 1) head(sahie_nonelderly) sahie_nonelderly_annual <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\", \"PCTUI_MOE\", \"NUI_PT\", \"NUI_MOE\", \"IPRCAT\", \"IPR_DESC\", \"AGE_DESC\", \"RACECAT\", \"RACE_DESC\"),      region = \"us:*\",      year = \"2006:2018\",     AGECAT = 1) head(sahie_nonelderly_annual) listCensusMetadata(     name = \"timeseries/idb/1year\",      type = \"variables\") pop_2050 <- getCensus(name = \"timeseries/idb/1year\",     vars = c(\"FIPS\", \"NAME\", \"AGE\", \"POP\"),     time = 2050) head(pop_2050) pop_portugal <- getCensus(     name = \"timeseries/idb/1year\",     vars = c(\"NAME\", \"POP\"),     time = 2050,     FIPS = \"PO\",     AGE = \"13:19\") pop_portugal qwi <- getCensus(     name = \"timeseries/qwi/sa\",     region = \"state:02\",     vars = c(\"Emp\", \"sex\"),     time = 2012,     quarter = 1,     agegrp = \"A07\",     ownercode = \"A05\",     firmsize = 1,     seasonadj = \"U\",     industry = 21) qwi"},{"path":"/articles/getting-started.html","id":"variable-groups","dir":"Articles","previous_headings":"Advanced topics","what":"Variable groups","title":"Getting started with censusapi","text":"surveys, particularly American Community Survey Decennial Census, can get many related variables using group, defined Census Bureau. data tools, like American FactFinder, idea referred table. American Community Survey (ACS) APIs include estimates (variable names ending “E”), annotations, margins error, statistical significance, depending data set. Read ACS variable types annotation symbol meanings Census website. can retrieve annotation variables manually, specifying list variables. ’ll get estimate, margin error annotations median household income past 12 months Census tracts Alaska. can also retrieve also estimates annotations group variables one command. ’s group call table, B19013. variable groups contain many related variables associated annotations. example, ’ll get list variables included group B17020, poverty status age.","code":"acs_income <- getCensus(     name = \"acs/acs5\",     vintage = 2017,      vars = c(\"NAME\", \"B19013_001E\", \"B19013_001EA\", \"B19013_001M\", \"B19013_001MA\"),      region = \"tract:*\",      regionin = \"state:02\") head(acs_income) # See descriptions of the variables in group B19013 group_B19013 <- listCensusMetadata(     name = \"acs/acs5\",     vintage = 2017,     type = \"variables\",     group = \"B19013\") group_B19013  acs_income_group <- getCensus(     name = \"acs/acs5\",      vintage = 2017,      vars = c(\"NAME\", \"group(B19013)\"),      region = \"tract:*\",      regionin = \"state:02\") head(acs_income_group) group_B17020 <- listCensusMetadata(     name = \"acs/acs5\",     vintage = 2017,     type = \"variables\",     group = \"B17020\") head(group_B17020)"},{"path":"/articles/getting-started.html","id":"advanced-geographies","dir":"Articles","previous_headings":"Advanced topics","what":"Advanced geographies","title":"Getting started with censusapi","text":"geographies, particularly Census tracts blocks, need specified within larger geographies like states counties. varies API endpoint, make sure read documentation specific API run listCensusMetadata see available geographies. may want get get data many geographies require parent geography. example, tract-level data 2010 Decennial Census can requested one state time. example, use built fips list state FIPS codes request tract-level data state join single data frame. regionin argument getCensus can also used string nested geographies, shown . 2010 Decennial Census summary file 1 requires specify state county retrieve block-level data. Use region request block level data, regionin specify desired state county.","code":"tracts <- NULL for (f in fips) {     stateget <- paste(\"state:\", f, sep=\"\")     temp <- getCensus(         name = \"dec/sf1\",         vintage = 2010,         vars = \"P001001\",         region = \"tract:*\",         regionin = stateget)     tracts <- rbind(tracts, temp) } head(tracts) data2010 <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = \"P001001\",      region = \"block:*\",     regionin = \"state:36+county:027+tract:010000\") head(data2010)"},{"path":"/articles/getting-started.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"Getting started with censusapi","text":"APIs contain hundreds API endpoints dozens datasets, work little differently. Census Bureau also makes frequent updates, unfortunately always announced advance. ’re getting error message unexpected results, things check.","code":""},{"path":"/articles/getting-started.html","id":"variables","dir":"Articles","previous_headings":"Troubleshooting","what":"Variables","title":"Getting started with censusapi","text":"Use listCensusMetadata(type = \"variables\") API see table available variables. Occasionally variable names change data updates API updates. names may different year year. Capitalization may also inconsistent datasets years. Census APIs case-sensitive, means variable name want uppercase ’ll need write uppercase request. APIs use uppercase variable names, use lowercase even use sentence case.","code":""},{"path":"/articles/getting-started.html","id":"geographies","dir":"Articles","previous_headings":"Troubleshooting","what":"Geographies","title":"Getting started with censusapi","text":"Use listCensusMetadata(type = \"geographies\") dataset check geographies can use. API list valid geographies occasionally change Census Bureau makes updates. previously available geography isn’t available anymore, email cnmp.developers.list@census.gov detailing issue. ’re specifying region FIPS code, example state:01, make sure use full code, padded 0s necessary. APIs always enforce (previously, state:1 usually worked), now . See Census reference files valid FIPS codes.","code":""},{"path":"/articles/getting-started.html","id":"unexpected-errors","dir":"Articles","previous_headings":"Troubleshooting","what":"Unexpected errors","title":"Getting started with censusapi","text":"Occasionally might get general error message \"error running query.  logged error correct ASAP.  Sorry inconvenience.\" comes Census Bureau caused number problems, including server issues. Try rerunning API call. doesn’t work requesting large amount data, try reducing amount ’re requesting, example getting one state time. ’re still trouble, email cnmp.developers.list@census.gov. Include email raw API call ’s provided getCensus error message (R code) can try help.","code":""},{"path":"/articles/getting-started.html","id":"margins-of-error-and-annotations","dir":"Articles","previous_headings":"Troubleshooting","what":"Margins of error and annotations","title":"Getting started with censusapi","text":"Read documentation understand might see values like -555555555 margin error columns. values set Census Bureau, censusapi package.","code":""},{"path":"/articles/getting-started.html","id":"other-ways-to-get-help","dir":"Articles","previous_headings":"Troubleshooting","what":"Other ways to get help","title":"Getting started with censusapi","text":"Open Github issue bugs issues R package. Join public Census Bureau Slack channel ask question R API rooms. Email Census Bureau API team cnmp.developers.list@census.gov questions relating underlying data APIs.","code":""},{"path":"/articles/getting-started.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"Additional resources","title":"Getting started with censusapi","text":"Census Data API User Guide","code":""},{"path":"/articles/getting-started.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Getting started with censusapi","text":"product uses Census Bureau Data API endorsed certified Census Bureau.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hannah Recht. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Recht H (2022). censusapi: Retrieve Data Census APIs. R package version 0.7.3.9000, https://github.com/hrecht/censusapi.","code":"@Manual{,   title = {censusapi: Retrieve Data from the Census APIs},   author = {Hannah Recht},   year = {2022},   note = {R package version 0.7.3.9000},   url = {https://github.com/hrecht/censusapi}, }"},{"path":"/index.html","id":"censusapi","dir":"","previous_headings":"","what":"Retrieve Data from the Census APIs","title":"Retrieve Data from the Census APIs","text":"censusapi accessor United States Census Bureau’s APIs. 300 Census API endpoints available, including Decennial Census, American Community Survey, Poverty Statistics, Population Estimates APIs. package designed let get data APIs using main function—getCensus—syntax dataset. censusapi generally uses APIs’ original parameter names users can easily transition Census’s documentation examples package. also includes metadata functions return data frames available APIs, variables, geographies.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Retrieve Data from the Census APIs","text":"Get latest stable release CRAN: can also install latest development version censusapi Github using devtools. people want - BEWARE!:","code":"install.packages(\"censusapi\") # install.packages(\"devtools\") devtools::install_github(\"hrecht/censusapi\")"},{"path":"/index.html","id":"api-key-setup","dir":"","previous_headings":"","what":"API key setup","title":"Retrieve Data from the Census APIs","text":"use Census APIs, sign API key, sent provided email address. ’ll need key use package. Census currently require API key APIs, can change moment package enforces key usage. recommended way manage key add .Renviron file. users want . Within R, run: , open .Renviron file text editor add following line: CENSUS_KEY=YOURKEYHERE ’ve added census key system environment, censusapi use default without extra work part. instances might want put key .Renviron - example, ’re shared school computer. can always choose manually set key=\"YOURKEY\" argument getCensus prefer.","code":"# Add key to .Renviron Sys.setenv(CENSUS_KEY=YOURKEYHERE) # Reload .Renviron readRenviron(\"~/.Renviron\") # Check to see that the expected key is output in your R console Sys.getenv(\"CENSUS_KEY\")"},{"path":"/index.html","id":"usage-examples","dir":"","previous_headings":"","what":"Usage examples","title":"Retrieve Data from the Census APIs","text":"Get uninsured rates Small Area Health Insurance Estimates (SAHIE) timeseries API using getCensus(). simple example: get state-level uninsured rates income group Alabama. complicated example: Get uninsured rate (PCTUI_PT) number unisured people (NUI_PT) non-elderly adults (AGECAT = 1) Florida (state = 12) incomes 138 400% poverty line (IPRCAT = 5), race (RACECAT) ethnicity. Read build censusapi call Getting started censusapi see examples every API example master list.","code":"library(censusapi) getCensus(name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),      region = \"state:01\",     year = 2018) #>   state    NAME IPRCAT                IPR_DESC PCTUI_PT YEAR #> 1    01 Alabama      0             All Incomes     11.9 2018 #> 2    01 Alabama      1      <= 200% of Poverty     19.6 2018 #> 3    01 Alabama      2      <= 250% of Poverty     18.5 2018 #> 4    01 Alabama      3      <= 138% of Poverty     20.6 2018 #> 5    01 Alabama      4      <= 400% of Poverty     15.5 2018 #> 6    01 Alabama      5 138% to 400% of Poverty     12.5 2018 sahie_detail <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\", \"NUI_PT\", \"IPR_DESC\", \"AGE_DESC\", \"RACECAT\", \"RACE_DESC\"),      region = \"state:12\",      year = 2018,     IPRCAT = 5,     AGECAT = 1) sahie_detail #>       state    NAME PCTUI_PT  NUI_PT                IPR_DESC       AGE_DESC RACECAT                                  RACE_DESC YEAR IPRCAT AGECAT #>   1    12 Florida     22.3 1220199 138% to 400% of Poverty 18 to 64 years       0                    All Races 2018      5      1 #>   2    12 Florida     19.3  477724 138% to 400% of Poverty 18 to 64 years       1    White alone, not Hispanic 2018      5      1 #>   3    12 Florida     20.2  200193 138% to 400% of Poverty 18 to 64 years       2    Black alone, not Hispanic 2018      5      1 #>   4    12 Florida     28.2  494054 138% to 400% of Poverty 18 to 64 years       3    Black alone, not Hispanic 2018      5      1"},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Retrieve Data from the Census APIs","text":"product uses Census Bureau Data API endorsed certified Census Bureau. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/reference/fips.html","id":null,"dir":"Reference","previous_headings":"","what":"List of state fips codes - 50 states plus DC — fips","title":"List of state fips codes - 50 states plus DC — fips","text":"small geographies Census APIs can used state hierarchy. list fips codes may looped retrieve data states.","code":""},{"path":"/reference/fips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of state fips codes - 50 states plus DC — fips","text":"","code":"fips"},{"path":"/reference/fips.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of state fips codes - 50 states plus DC — fips","text":"list fips codes 50 states District Columbia","code":""},{"path":"/reference/fips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of state fips codes - 50 states plus DC — fips","text":"","code":"fips #>  [1] \"01\" \"02\" \"04\" \"05\" \"06\" \"08\" \"09\" \"10\" \"11\" \"12\" \"13\" \"15\" \"16\" \"17\" \"18\" #> [16] \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" #> [31] \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" #> [46] \"50\" \"51\" \"53\" \"54\" \"55\" \"56\""},{"path":"/reference/getCensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Census data from a given API — getCensus","title":"Retrieve Census data from a given API — getCensus","text":"Retrieve Census data given API","code":""},{"path":"/reference/getCensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Census data from a given API — getCensus","text":"","code":"getCensus(   name,   vintage = NULL,   key = Sys.getenv(\"CENSUS_KEY\"),   vars,   region = NULL,   regionin = NULL,   time = NULL,   year = NULL,   date = NULL,   period = NULL,   monthly = NULL,   show_call = FALSE,   category_code = NULL,   data_type_code = NULL,   naics = NULL,   pscode = NULL,   naics2012 = NULL,   naics2007 = NULL,   naics2002 = NULL,   naics1997 = NULL,   sic = NULL,   ... )"},{"path":"/reference/getCensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Census data from a given API — getCensus","text":"name API name - e.g. acs5. See list https://api.census.gov/data.html vintage Year dataset, e.g. 2014 - required timeseries APIs key Census API key, gotten https://api.census.gov/data/key_signup.html vars List variables get region Geography get regionin Optional hierarchical geography limit region time, year, date, period, monthly Optional arguments used time series APIs show_call List underlying API call sent Census Bureau info category_code, data_type_code Arguments used Economic Indicators Time Series API naics, pscode Arguments used Annual Survey Manufactures API naics2012, naics2007, naics2002, naics1997, sic Arguments used Economy Wide Key Statistics APIs Business Patterns APIs ... valid parameters pass Census API. Note: APIs case sensitive.","code":""},{"path":"/reference/getCensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Census data from a given API — getCensus","text":"","code":"df <- getCensus(name = \"acs/acs5\", vintage = 2017, vars = c(\"B01001_001E\", \"NAME\", \"B01002_001E\", \"B19013_001E\"), region = \"tract:*\", regionin = \"state:06\") head(df) #>   state county  tract B01001_001E #> 1    06    037 503502        4359 #> 2    06    037 504102           7 #> 3    06    037 265700        5181 #> 4    06    037 267300        4751 #> 5    06    037 267502        3524 #> 6    06    037 267700        3141 #>                                                   NAME  B01002_001E B19013_001E #> 1 Census Tract 5035.02, Los Angeles County, California         35.8       73979 #> 2 Census Tract 5041.02, Los Angeles County, California -666666666.0  -666666666 #> 3    Census Tract 2657, Los Angeles County, California         47.5       84327 #> 4    Census Tract 2673, Los Angeles County, California         34.6       61290 #> 5 Census Tract 2675.02, Los Angeles County, California         30.8       80313 #> 6    Census Tract 2677, Los Angeles County, California         35.0       84608  # Use American Community Survey variable groups to get all data from a given table. # This returns estimates as well as margins of error and annotation flags. acs_group <- getCensus(name = \"acs/acs5\", vintage = 2017, vars = c(\"NAME\", \"group(B19013)\"), region = \"county:*\") #> Warning: NAs introduced by coercion head(acs_group) #>   state county                          NAME B19013_001E B19013_001EA #> 1    30    019       Daniels County, Montana       53591         <NA> #> 2    72    073 Jayuya Municipio, Puerto Rico       15615         <NA> #> 3    30    079       Prairie County, Montana       50850         <NA> #> 4    39    173             Wood County, Ohio       58033         <NA> #> 5    24    023      Garrett County, Maryland       48174         <NA> #> 6    08    011         Bent County, Colorado       32500         <NA> #>   B19013_001M B19013_001MA         GEO_ID NAME_1 #> 1        3318         <NA> 0500000US30019     NA #> 2        3424         <NA> 0500000US72073     NA #> 3        6481         <NA> 0500000US30079     NA #> 4        1604         <NA> 0500000US39173     NA #> 5        2234         <NA> 0500000US24023     NA #> 6        3442         <NA> 0500000US08011     NA  # Retreive block-level data within a specific tract using a nested regionin argument data2010 <- getCensus(name = \"dec/sf1\", vintage = 2010, vars = c(\"NAME\",\"P001001\"), region = \"block:*\", regionin = \"state:36+county:027+tract:010000\") head(data2010) #>   state county  tract block #> 1    36    027 010000  1000 #> 2    36    027 010000  1011 #> 3    36    027 010000  1028 #> 4    36    027 010000  1001 #> 5    36    027 010000  1031 #> 6    36    027 010000  1002 #>                                                                     NAME #> 1 Block 1000, Block Group 1, Census Tract 100, Dutchess County, New York #> 2 Block 1011, Block Group 1, Census Tract 100, Dutchess County, New York #> 3 Block 1028, Block Group 1, Census Tract 100, Dutchess County, New York #> 4 Block 1001, Block Group 1, Census Tract 100, Dutchess County, New York #> 5 Block 1031, Block Group 1, Census Tract 100, Dutchess County, New York #> 6 Block 1002, Block Group 1, Census Tract 100, Dutchess County, New York #>   P001001 #> 1      31 #> 2      17 #> 3      41 #> 4       0 #> 5       0 #> 6       4  # Get poverty rates for children and all ages over time saipe <- getCensus(name = \"timeseries/poverty/saipe\", vars = c(\"NAME\", \"SAEPOVRT0_17_PT\", \"SAEPOVRTALL_PT\"), region = \"state:01\", year = \"2000:2019\") head(saipe) #>   state    NAME SAEPOVRT0_17_PT SAEPOVRTALL_PT YEAR #> 1    01 Alabama            20.5           14.6 2000 #> 2    01 Alabama            22.1           15.7 2001 #> 3    01 Alabama            21.6           15.4 2002 #> 4    01 Alabama            22.3           15.3 2003 #> 5    01 Alabama            22.6           16.1 2004 #> 6    01 Alabama            24.3           16.9 2005  # Get county business patterns data for a specific NAICS sector cbp_2016 <- getCensus(name = \"cbp\", vintage = \"2016\", vars = c(\"EMP\", \"ESTAB\", \"NAICS2012_TTL\", \"GEO_TTL\"), region = \"state:*\", naics2012 = \"23\") head(cbp_2016) #>   state    EMP ESTAB NAICS2012_TTL     GEO_TTL NAICS2012 #> 1    27 118033 16360  Construction   Minnesota        23 #> 2    28  44551  3796  Construction Mississippi        23 #> 3    29 121494 13263  Construction    Missouri        23 #> 4    30  25036  5326  Construction     Montana        23 #> 5    31  45909  6357  Construction    Nebraska        23 #> 6    32  72817  4839  Construction      Nevada        23"},{"path":"/reference/getFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function: Get the API response, return a data frame — getFunction","title":"Internal function: Get the API response, return a data frame — getFunction","text":"Internal function: Get API response, return data frame","code":""},{"path":"/reference/getFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function: Get the API response, return a data frame — getFunction","text":"","code":"getFunction(   apiurl,   name,   key,   get,   region,   regionin,   time,   year,   date,   period,   monthly,   show_call,   category_code,   data_type_code,   naics,   pscode,   naics2012,   naics2007,   naics2002,   naics1997,   sic,   ... )"},{"path":"/reference/getFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function: Get the API response, return a data frame — getFunction","text":"apiurl, key, get, region, time, etc","code":""},{"path":"/reference/listCensusApis.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dataset metadata on all available APIs as a data frame — listCensusApis","title":"Get dataset metadata on all available APIs as a data frame — listCensusApis","text":"Scrapes https://api.census.gov/data.json returns dataframe includes: title, name, vintage (applicable), url, isTimeseries (binary), temporal (helpful time series), description, modified date","code":""},{"path":"/reference/listCensusApis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dataset metadata on all available APIs as a data frame — listCensusApis","text":"","code":"listCensusApis()"},{"path":"/reference/listCensusApis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dataset metadata on all available APIs as a data frame — listCensusApis","text":"","code":"apis <- listCensusApis() head(apis) #>                                                                title   name #> 556 Economic Surveys: Annual Business Survey: Annual Business Survey  abscb #> 711 Economic Surveys: Annual Business Survey: Annual Business Survey  abscb #> 830 Economic Surveys: Annual Business Survey: Annual Business Survey  abscb #> 557 Economic Surveys: Annual Business Survey: Annual Business Survey abscbo #> 712 Economic Surveys: Annual Business Survey: Annual Business Survey abscbo #> 831 Economic Surveys: Annual Business Survey: Annual Business Survey abscbo #>     vintage                                     url isTimeseries     temporal #> 556    2017  https://api.census.gov/data/2017/abscb           NA unidentified #> 711    2018  https://api.census.gov/data/2018/abscb           NA unidentified #> 830    2019  https://api.census.gov/data/2019/abscb           NA unidentified #> 557    2017 https://api.census.gov/data/2017/abscbo           NA unidentified #> 712    2018 https://api.census.gov/data/2018/abscbo           NA unidentified #> 831    2019 https://api.census.gov/data/2019/abscbo           NA unidentifieddescription #> 556 The Annual Business Survey (ABS) provides information on selected economic and demographic characteristics for businesses and business owners by sex, ethnicity, race, and veteran status. Further, the survey measures research and development (for microbusinesses), new business topics such as innovation and technology, as well as other business characteristics. The U.S. Census Bureau and the National Center conduct the ABS jointly for Science and Engineering Statistics within the National Science Foundation. The ABS replaces the five-year Survey of Business Owners (SBO) for employer businesses, the Annual Survey of Entrepreneurs (ASE), the Business R&D and Innovation for Microbusinesses survey (BRDI-M), and the innovation section of the Business R&D and Innovation Survey (BRDI-S). https://www.census.gov/programs-surveys/abs.html #> 711 The Annual Business Survey (ABS) provides information on selected economic and demographic characteristics for businesses and business owners by sex, ethnicity, race, and veteran status. Further, the survey measures research and development (for microbusinesses), new business topics such as innovation and technology, as well as other business characteristics. The U.S. Census Bureau and the National Center conduct the ABS jointly for Science and Engineering Statistics within the National Science Foundation. The ABS replaces the five-year Survey of Business Owners (SBO) for employer businesses, the Annual Survey of Entrepreneurs (ASE), the Business R&D and Innovation for Microbusinesses survey (BRDI-M), and the innovation section of the Business R&D and Innovation Survey (BRDI-S). https://www.census.gov/programs-surveys/abs.html #> 830 The Annual Business Survey (ABS) provides information on selected economic and demographic characteristics for businesses and business owners by sex, ethnicity, race, and veteran status. Further, the survey measures research and development (for microbusinesses), new business topics such as innovation and technology, as well as other business characteristics. The U.S. Census Bureau and the National Center conduct the ABS jointly for Science and Engineering Statistics within the National Science Foundation. The ABS replaces the five-year Survey of Business Owners (SBO) for employer businesses, the Annual Survey of Entrepreneurs (ASE), the Business R&D and Innovation for Microbusinesses survey (BRDI-M), and the innovation section of the Business R&D and Innovation Survey (BRDI-S). https://www.census.gov/programs-surveys/abs.html #> 557 The Annual Business Survey (ABS) provides information on selected economic and demographic characteristics for businesses and business owners by sex, ethnicity, race, and veteran status. Further, the survey measures research and development (for microbusinesses), new business topics such as innovation and technology, as well as other business characteristics. The U.S. Census Bureau and the National Center conduct the ABS jointly for Science and Engineering Statistics within the National Science Foundation. The ABS replaces the five-year Survey of Business Owners (SBO) for employer businesses, the Annual Survey of Entrepreneurs (ASE), the Business R&D and Innovation for Microbusinesses survey (BRDI-M), and the innovation section of the Business R&D and Innovation Survey (BRDI-S). https://www.census.gov/programs-surveys/abs.html #> 712 The Annual Business Survey (ABS) provides information on selected economic and demographic characteristics for businesses and business owners by sex, ethnicity, race, and veteran status. Further, the survey measures research and development (for microbusinesses), new business topics such as innovation and technology, as well as other business characteristics. The U.S. Census Bureau and the National Center conduct the ABS jointly for Science and Engineering Statistics within the National Science Foundation. The ABS replaces the five-year Survey of Business Owners (SBO) for employer businesses, the Annual Survey of Entrepreneurs (ASE), the Business R&D and Innovation for Microbusinesses survey (BRDI-M), and the innovation section of the Business R&D and Innovation Survey (BRDI-S). https://www.census.gov/programs-surveys/abs.html #> 831 The Annual Business Survey (ABS) provides information on selected economic and demographic characteristics for businesses and business owners by sex, ethnicity, race, and veteran status. Further, the survey measures research and development (for microbusinesses), new business topics such as innovation and technology, as well as other business characteristics. The U.S. Census Bureau and the National Center conduct the ABS jointly for Science and Engineering Statistics within the National Science Foundation. The ABS replaces the five-year Survey of Business Owners (SBO) for employer businesses, the Annual Survey of Entrepreneurs (ASE), the Business R&D and Innovation for Microbusinesses survey (BRDI-M), and the innovation section of the Business R&D and Innovation Survey (BRDI-S). https://www.census.gov/programs-surveys/abs.html #>                  modified #> 556 2020-04-30 00:00:00.0 #> 711 2020-10-26 00:00:00.0 #> 830 2021-08-17 00:00:00.0 #> 557 2020-04-30 00:00:00.0 #> 712 2020-10-26 00:00:00.0 #> 831 2021-08-17 00:00:00.0"},{"path":"/reference/listCensusMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get variable or geography metadata for a given API as a data frame — listCensusMetadata","title":"Get variable or geography metadata for a given API as a data frame — listCensusMetadata","text":"Get variable geography metadata given API data frame","code":""},{"path":"/reference/listCensusMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get variable or geography metadata for a given API as a data frame — listCensusMetadata","text":"","code":"listCensusMetadata(name, vintage = NULL, type = \"variables\", group = NULL)"},{"path":"/reference/listCensusMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get variable or geography metadata for a given API as a data frame — listCensusMetadata","text":"name API name - e.g. acs5. See list https://api.census.gov/data.html vintage Vintage dataset, e.g. 2014 - required timeseries APIs type Type metadata return, either \"variables\", \"geographies\" \"geography\", \"groups\". Default variables. group optional variable group code, used return metadata specific group variables .","code":""},{"path":"/reference/makeVarlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Use variable metadata to find variables containing a given string. — makeVarlist","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"Return list variable names data frame variable metadata containing given string. can used create list variables later pass getCensus, data frame documenting variables used given project.","code":""},{"path":"/reference/makeVarlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"","code":"makeVarlist(name, vintage = NULL, find, varsearch = \"all\", output = \"list\")"},{"path":"/reference/makeVarlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"name API name - e.g. acs5. See list https://api.census.gov/data.html vintage Year dataset, e.g. 2014 - required timeseries APIs find string find variable metadata varsearch Optional argument specifying fields search. Default \"\". Options \"\", \"name\", \"label\", \"concept\". output Optional argument, specifying output \"list\" \"dataframe\". Default \"list\".","code":""},{"path":"/reference/makeVarlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"","code":"# Return a list, and then use getCensus function to retrieve those variables myvars <- makeVarlist(name = \"timeseries/poverty/saipe\",   find = \"Ages 0-4\",   varsearch = \"label\") myvars #> [1] \"SAEPOVRT0_4_MOE\"  \"SAEPOVRT0_4_UB90\" \"SAEPOVRT0_4_LB90\" \"SAEPOVRT0_4_PT\"   #> [5] \"SAEPOV0_4_PT\"     \"SAEPOVU_0_4\"      \"SAEPOV0_4_MOE\"    \"SAEPOV0_4_UB90\"   #> [9] \"SAEPOV0_4_LB90\"   saipe_dt <- getCensus(name = \"timeseries/poverty/saipe\",   time = 2016,   vars = myvars,   region = \"state:*\") head(saipe_dt) #>   time state SAEPOVRT0_4_MOE SAEPOVRT0_4_UB90 SAEPOVRT0_4_LB90 SAEPOVRT0_4_PT #> 1 2016    01             1.5             28.9             25.9           27.4 #> 2 2016    02             1.9             17.0             13.2           15.1 #> 3 2016    04             1.2             26.1             23.7           24.9 #> 4 2016    05             1.8             29.1             25.5           27.3 #> 5 2016    06             0.5             21.2             20.2           20.7 #> 6 2016    08             1.2             15.1             12.7           13.9 #>   SAEPOV0_4_PT SAEPOVU_0_4 SAEPOV0_4_MOE SAEPOV0_4_UB90 SAEPOV0_4_LB90 #> 1        78675      287177          4418          83093          74257 #> 2         7919       52408          1021           8940           6898 #> 3       106817      428317          5131         111948         101686 #> 4        50341      184115          3246          53587          47095 #> 5       502432     2430975         13017         515449         489415 #> 6        46111      330815          3894          50005          42217"},{"path":"/news/index.html","id":"censusapi-073","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.3","title":"censusapi 0.7.3","text":"Properly types certain variables international trade timeseries APIs.","code":""},{"path":"/news/index.html","id":"censusapi-072","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.2","title":"censusapi 0.7.2","text":"Adds named parameter YEAR getCensus() per changes timeseries endpoints previously used TIME parameter. Updates examples using SAHIE SAIPE APIs per Census Bureau changes endpoints.","code":""},{"path":"/news/index.html","id":"censusapi-071","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.1","title":"censusapi 0.7.1","text":"CRAN release: 2020-10-14 Removes listCensusMetadata() masterlist examples used Business Dynamic Statistics endpoints, recently deprecated.","code":""},{"path":"/news/index.html","id":"censusapi-070","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.0","title":"censusapi 0.7.0","text":"CRAN release: 2020-09-07 Adds show_call option getCensus(), shows underlying API call (otherwise shown errors) link package documentation used. Converts improperly formatted string “N/” “NULL” values underlying Census data true NA values. Keeps 2017 NAICS variables characters, instead erroneously converting numeric. Parses endpoint numeric variables -character variable names numeric several popular endpoints: SAHIE, SAIPE, ZBP, CBP, PEP Decennial Response Rates. Removes examples deprecated 1990 2000 Decennial endpoints.","code":""},{"path":"/news/index.html","id":"censusapi-061","dir":"Changelog","previous_headings":"","what":"censusapi 0.6.1","title":"censusapi 0.6.1","text":"Updates web link FIPS codes reference Census website reorganization. Adds examples Decennial Census response rates, updates several examples retrieve newer data. Removes example masterlist package due size, online .","code":""},{"path":"/news/index.html","id":"censusapi-060","dir":"Changelog","previous_headings":"","what":"censusapi 0.6.0","title":"censusapi 0.6.0","text":"CRAN release: 2019-04-13 Allows use miscellaneous paramaters getCensus(). allows users specify valid API argument name pass value, giving full access underlying Census Bureau APIs. Adds group parameter listCensusMetadata(). allows users get variable metadata specified variable group. Improves internal logic listCensusMetadata(). Add documentation examples using miscellaneous paramaters. Returns underlying API call error messages, particularly useful users needing Census Bureau. Specifies tract block group example due underlying API changes. Adds Contributor Code Conduct.","code":""},{"path":"/news/index.html","id":"censusapi-050","dir":"Changelog","previous_headings":"","what":"censusapi 0.5.0","title":"censusapi 0.5.0","text":"Makes region optional argument getCensus, rather required. Pads fips codes stored fips dataset zeroes.","code":""},{"path":"/news/index.html","id":"censusapi-041","dir":"Changelog","previous_headings":"","what":"censusapi 0.4.1","title":"censusapi 0.4.1","text":"CRAN release: 2018-08-19 Adds groups type option listCensusMetadata. Fixes bug listCensusMetadata variables call caused underlying Census API change, renamed validValues values endpoints. Converts variable metadata columns factors characters. Applies numeric conversion exclusions API endpoints. Improves language surrounding error messages Census Bureau returns. Updates 2010 Decennial Census examples use new 2010 dec/sf1 endpoint, replace 2010 sf1 endpoint August 30, 2018.","code":""},{"path":"/news/index.html","id":"censusapi-040","dir":"Changelog","previous_headings":"","what":"censusapi 0.4.0","title":"censusapi 0.4.0","text":"Adds support NAICS code arguments used Business Patterns APIs, Economic Census APIs, Annual Survey Manufactures APIs.","code":""},{"path":"/news/index.html","id":"censusapi-030","dir":"Changelog","previous_headings":"","what":"censusapi 0.3.0","title":"censusapi 0.3.0","text":"CRAN release: 2018-05-02 convert ACS annotation flag variables numeric columns. Puts lowercase variable name columns first (geographies), rather non-numeric columns. Changes punctuation returned column names underscores, removing repeated underscores trailing punctuation. Uses consistent spacing examples. Updates examples using ACS data latest year using new acs/acs5 endpoint adds variable group examples.","code":""},{"path":"/news/index.html","id":"censusapi-021","dir":"Changelog","previous_headings":"","what":"censusapi 0.2.1","title":"censusapi 0.2.1","text":"CRAN release: 2017-08-01 Fixes bug listCensusMetadata variables call caused underlying Census API changes.","code":""},{"path":"/news/index.html","id":"censusapi-020","dir":"Changelog","previous_headings":"","what":"censusapi 0.2.0","title":"censusapi 0.2.0","text":"CRAN release: 2017-06-06 Updated examples, documentation, vignette.","code":""},{"path":"/news/index.html","id":"censusapi-012","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.2","title":"censusapi 0.1.2","text":"Fixes bug caused single-row responses throw error","code":""},{"path":"/news/index.html","id":"censusapi-011","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.1","title":"censusapi 0.1.1","text":"Uses https rather http requests. Census Bureau announced APIs https-beginning August 28, 2017. Note: change generally increased run time retrieving variable metadata listCensusMetadata. APIs, function run one second. lag may noticeable American Community Survey APIs, 40,000 variables. Improvements planned future releases. listCensusMetadata allows full word single letter argument type parameter","code":""},{"path":"/news/index.html","id":"censusapi-0109001","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.0.9001","title":"censusapi 0.1.0.9001","text":"Scrapes http://api.census.gov/data.json rather .html listCensusApis, starts removing XML dependency. .json data also includes several fields present .html file, useful added returned data frame. Changes dataset used listCensusMetadata examples, mainly build/checks speed.","code":""},{"path":"/news/index.html","id":"censusapi-0109000","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.0.9000","title":"censusapi 0.1.0.9000","text":"Set getCensus(key) argument’s default value CENSUS_KEY .Renviron. Explicitly encourages Census key added .Renviron. (Users can always override given input.) Parses HTML response code. particularly important response Census APIs provided invalid keys.","code":""},{"path":"/news/index.html","id":"censusapi-010","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.0","title":"censusapi 0.1.0","text":"Removes fips code 72 (Puerto Rico) included fips dataset Puerto Rico included Census API datasets. Changes census key references examples Sys.getenv(“CENSUS_KEY”).","code":""}]
