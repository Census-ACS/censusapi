[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, interest fostering open welcoming community, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality. Examples unacceptable behavior participants include: use sexualized language imagery Personal attacks Trolling insulting/derogatory comments Public private harassment Publishing ’s private information, physical electronic addresses, without explicit permission unethical unprofessional conduct Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. adopting Code Conduct, project maintainers commit fairly consistently applying principles every aspect managing project. Project maintainers follow enforce Code Conduct may permanently removed project team. code conduct applies within project spaces public spaces individual representing project community. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.2.0, available https://www.contributor-covenant.org/version/1/2/0/code--conduct.html","code":""},{"path":"/articles/accessing-microdata.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Accessing microdata","text":"product uses Census Bureau Data API endorsed certified Census Bureau.","code":""},{"path":"/articles/advanced-usage.html","id":"advanced-topics","dir":"Articles","previous_headings":"","what":"Advanced topics","title":"Advanced censusapi features","text":"package allows access full range U.S. Census Bureau’s APIs. API allows , can specify complicated geographies filter based range parameters. API little different, sure read documentation specific API ’re using. Also see examples list examples.","code":""},{"path":"/articles/advanced-usage.html","id":"miscellaneous-parameters","dir":"Articles","previous_headings":"Advanced topics","what":"Miscellaneous parameters","title":"Advanced censusapi features","text":"APIs allow complex calls, including specifying country FIPS code age. commonly used parameters, including time, date, sic included built-options getCensus, can also specify parameters . (Note: generally apply popular American Community Survey Decennial Census APIs.) SAHIE API, can filter data categorical variables AGECAT (age group), IPRCAT (income group), RACECAT (race) SEXCAT (sex), addition geography year. information variables available online documentation. ’s get uninsured rate (PCTUI_PT) non-elderly adults (AGECAT = 1) incomes 138 400% poverty line (IPRCAT = 5), race (RACECAT) state. Note: data race returned population large enough, states rows race groups. ’s another example, getting national data percent uninsured (PCTUI_PT) number uninsured (NUI_PT), along associated margins error, race group income group years. APIs can filtered . example, International Data Base population projections APIs allow get data age country. See variables IDB 1 year API allows: ’s simple call getting projected population age countries 2050. can make much specific call specifying FIPS AGE get just population projections teenagers Portugal. Quarterly Workforce Indicators APIs allow even specific calls. ’s one example:","code":"sahie_nonelderly <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\", \"IPR_DESC\", \"AGE_DESC\", \"RACECAT\", \"RACE_DESC\"),      region = \"state:*\",      year = 2018,     IPRCAT = 5,     AGECAT = 1) head(sahie_nonelderly) ##   state    NAME PCTUI_PT                IPR_DESC       AGE_DESC RACECAT ## 1    01 Alabama     16.0 138% to 400% of Poverty 18 to 64 years       0 ## 2    01 Alabama     14.4 138% to 400% of Poverty 18 to 64 years       1 ## 3    01 Alabama     15.9 138% to 400% of Poverty 18 to 64 years       2 ## 4    01 Alabama     37.5 138% to 400% of Poverty 18 to 64 years       3 ## 5    02  Alaska     22.5 138% to 400% of Poverty 18 to 64 years       0 ## 6    02  Alaska     18.5 138% to 400% of Poverty 18 to 64 years       1 ##                   RACE_DESC YEAR IPRCAT AGECAT ## 1                 All Races 2018      5      1 ## 2 White alone, not Hispanic 2018      5      1 ## 3 Black alone, not Hispanic 2018      5      1 ## 4       Hispanic (any race) 2018      5      1 ## 5                 All Races 2018      5      1 ## 6 White alone, not Hispanic 2018      5      1 sahie_nonelderly_annual <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\", \"PCTUI_MOE\", \"NUI_PT\", \"NUI_MOE\", \"IPRCAT\", \"IPR_DESC\", \"AGE_DESC\", \"RACECAT\", \"RACE_DESC\"),      region = \"us:*\",      year = \"2006:2018\",     AGECAT = 1) head(sahie_nonelderly_annual) ##   us          NAME PCTUI_PT PCTUI_MOE   NUI_PT NUI_MOE IPRCAT ## 1  1 United States     19.5       0.3 36363986  549708      0 ## 2  1 United States     39.5       0.7 19368368  440544      1 ## 3  1 United States     36.5       0.6 23595529  455801      2 ## 4  1 United States     13.7       0.3 17094552  364661      0 ## 5  1 United States     32.0       0.8  7846458  277188      1 ## 6  1 United States     28.5       0.7  9614431  291480      2 ##             IPR_DESC       AGE_DESC RACECAT                 RACE_DESC YEAR ## 1        All Incomes 18 to 64 years       0                 All Races 2006 ## 2 <= 200% of Poverty 18 to 64 years       0                 All Races 2006 ## 3 <= 250% of Poverty 18 to 64 years       0                 All Races 2006 ## 4        All Incomes 18 to 64 years       1 White alone, not Hispanic 2006 ## 5 <= 200% of Poverty 18 to 64 years       1 White alone, not Hispanic 2006 ## 6 <= 250% of Poverty 18 to 64 years       1 White alone, not Hispanic 2006 ##   AGECAT ## 1      1 ## 2      1 ## 3      1 ## 4      1 ## 5      1 ## 6      1 listCensusMetadata(     name = \"timeseries/idb/1year\",      type = \"variables\") ##       name ## 1      POP ## 2     GENC ## 3 AREA_KM2 ## 4     FIPS ## 5      SEX ## 6       YR ## 7     NAME ## 8      AGE ##                                                                                label ## 1                                                          Total mid-year population ## 2 Geopolitical Entities, Names, and Codes (GENC) two character country code standard ## 3                                                          Area in square kilometers ## 4                                                             FIPS country/area Code ## 5                                                                                Sex ## 6                                                                               Year ## 7                                                               Country or area name ## 8                                                     Single year of age from 0-100+ ##   predicateType group limit concept hasGeoCollectionSupport required ## 1           int   N/A     0    <NA>                    <NA>     <NA> ## 2        string   N/A     0    <NA>                    <NA>     <NA> ## 3           int   N/A     0    <NA>                    <NA>     <NA> ## 4        string   N/A     0    <NA>                    <NA>     <NA> ## 5           int   N/A     0    <NA>                    <NA>     <NA> ## 6           int   N/A     0    <NA>                    <NA>     <NA> ## 7        string   N/A     0    <NA>                    <NA>     <NA> ## 8           int   N/A     0    <NA>                    <NA>     <NA> pop_2050 <- getCensus(name = \"timeseries/idb/1year\",     vars = c(\"FIPS\", \"NAME\", \"AGE\", \"POP\"),     time = 2050) head(pop_2050) ##   time FIPS    NAME AGE POP ## 1 2050   AN Andorra   0 533 ## 2 2050   AN Andorra   1 540 ## 3 2050   AN Andorra   2 549 ## 4 2050   AN Andorra   3 559 ## 5 2050   AN Andorra   4 568 ## 6 2050   AN Andorra   5 581 pop_portugal <- getCensus(     name = \"timeseries/idb/1year\",     vars = c(\"NAME\", \"POP\"),     time = 2050,     FIPS = \"PO\",     AGE = \"13:19\") pop_portugal ##    time     NAME   POP FIPS AGE ## 1  2050 Portugal 81372   PO  13 ## 2  2050 Portugal 81824   PO  14 ## 3  2050 Portugal 82260   PO  15 ## 4  2050 Portugal 82665   PO  16 ## 5  2050 Portugal 82937   PO  17 ## 6  2050 Portugal 83067   PO  18 ## 7  2050 Portugal 83081   PO  19 ## 8  2050 Portugal 42002   PO  13 ## 9  2050 Portugal 42273   PO  14 ## 10 2050 Portugal 42522   PO  15 ## 11 2050 Portugal 42746   PO  16 ## 12 2050 Portugal 42900   PO  17 ## 13 2050 Portugal 42979   PO  18 ## 14 2050 Portugal 42998   PO  19 ## 15 2050 Portugal 39370   PO  13 ## 16 2050 Portugal 39551   PO  14 ## 17 2050 Portugal 39738   PO  15 ## 18 2050 Portugal 39919   PO  16 ## 19 2050 Portugal 40037   PO  17 ## 20 2050 Portugal 40088   PO  18 ## 21 2050 Portugal 40083   PO  19 qwi <- getCensus(     name = \"timeseries/qwi/sa\",     region = \"state:02\",     vars = c(\"Emp\", \"sex\"),     time = 2012,     quarter = 1,     agegrp = \"A07\",     ownercode = \"A05\",     firmsize = 1,     seasonadj = \"U\",     industry = 21) qwi ##   Emp sex    time quarter agegrp ownercode firmsize seasonadj industry state ## 1  54   0 2012-Q1       1    A07       A05        1         U       21    02 ## 2  48   1 2012-Q1       1    A07       A05        1         U       21    02 ## 3   6   2 2012-Q1       1    A07       A05        1         U       21    02"},{"path":"/articles/advanced-usage.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Advanced censusapi features","text":"product uses Census Bureau Data API endorsed certified Census Bureau.","code":""},{"path":"/articles/example-masterlist.html","id":"american-community-survey","dir":"Articles","previous_headings":"","what":"American Community Survey","title":"Even more censusapi examples","text":"multiple useful ACS datasets slightly different purposes. ’s Census Bureau describes : “Detailed Tables contain detailed cross-tabulations, many published block groups. data population counts. 20,000 variables dataset. Subject Tables provide overview estimates available particular topic. data presented population counts percentages. 18,000 variables dataset. Data Profiles contain broad social, economic, housing, demographic information. data presented population counts percentages. 1,000 variables dataset. Comparison Profiles similar Data Profiles also include comparisons past-year data. current year data compared prior 5-Year data include statistical significance testing. 1,000 variables dataset.”","code":""},{"path":"/articles/example-masterlist.html","id":"acs-detailed-tables","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Detailed Tables","title":"Even more censusapi examples","text":"Get total population median income places (towns, cities, etc) Indiana.","code":"acs_income <- getCensus(     name = \"acs/acs5\",     vintage = 2020,      vars = c(\"NAME\", \"B01001_001E\", \"B19013_001E\"),      region = \"place:*\",     regionin = \"state:18\") head(acs_income) ##   state place                      NAME B01001_001E B19013_001E ## 1    18 49932   Mishawaka city, Indiana       49675       44792 ## 2    18 49950    Mitchell city, Indiana        4272       43598 ## 3    18 50058       Modoc town, Indiana         161       37750 ## 4    18 50148       Monon town, Indiana        1650       44904 ## 5    18 50202      Monroe town, Indiana         864       60625 ## 6    18 50526 Monroe City town, Indiana        1027       57917"},{"path":"/articles/example-masterlist.html","id":"acs-subject-tables","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Subject Tables","title":"Even more censusapi examples","text":"Get percent people without internet subscription income five counties New York City, associated margins error: overall: S2801_C02_019E income less $20,000: S2801_C02_023E income $20,000 $74,999: S2801_C02_027E income $75,000 greater: S2801_C02_031E","code":"acs_subject <- getCensus(     name = \"acs/acs1/subject\",     vintage = 2018,      vars = c(\"NAME\", \"S2801_C02_019E\", \"S2801_C02_019M\",                      \"S2801_C02_023E\", \"S2801_C02_023M\",                       \"S2801_C02_027E\", \"S2801_C02_027M\",                      \"S2801_C02_031E\", \"S2801_C02_031M\"),      region = \"county:005,047,061,081,085\",     regionin = \"state:36\") head(acs_subject) ##   state county                      NAME S2801_C02_019E S2801_C02_019M ## 1    36    081   Queens County, New York           13.6            0.6 ## 2    36    061 New York County, New York           12.6            0.8 ## 3    36    005    Bronx County, New York           21.3            1.0 ## 4    36    047    Kings County, New York           17.2            0.6 ## 5    36    085 Richmond County, New York           16.3            1.5 ##   S2801_C02_023E S2801_C02_023M S2801_C02_027E S2801_C02_027M S2801_C02_031E ## 1           35.7            2.3           15.6            1.1            5.5 ## 2           36.6            2.7           15.9            1.8            3.3 ## 3           39.0            2.5           17.4            1.4            6.8 ## 4           39.7            1.8           18.5            1.0            5.6 ## 5           40.7            6.4           22.8            3.6            6.4 ##   S2801_C02_031M ## 1            0.6 ## 2            0.6 ## 3            1.2 ## 4            0.5 ## 5            1.8"},{"path":"/articles/example-masterlist.html","id":"acs-comparison-profiles","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Comparison Profiles","title":"Even more censusapi examples","text":"Get annaul median household income inflation-adjusted 2019 dollars Alabama cities past five years.","code":"acs_comparison <- getCensus(     name = \"acs/acs1/cprofile\",     vintage = 2019,      vars = c(\"NAME\", \"CP03_2015_062E\", \"CP03_2016_062E\", \"CP03_2017_062E\", \"CP03_2018_062E\"),      region = \"place:*\",     regionin = \"state:01\") head(acs_comparison) ##   state place                     NAME CP03_2015_062E CP03_2016_062E ## 1    01 50000     Mobile city, Alabama          41530          41963 ## 2    01 77256 Tuscaloosa city, Alabama          46960          41950 ## 3    01 51000 Montgomery city, Alabama          44702          44250 ## 4    01 07000 Birmingham city, Alabama          34831          38529 ## 5    01 35896     Hoover city, Alabama          83387          84004 ## 6    01 21184     Dothan city, Alabama          47645          45112 ##   CP03_2017_062E CP03_2018_062E ## 1          42024          39349 ## 2          49226          44314 ## 3          44303          49771 ## 4          35235          37055 ## 5          87954          88899 ## 6          45973          50156"},{"path":"/articles/example-masterlist.html","id":"acs-migration-flows","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Migration Flows","title":"Even more censusapi examples","text":"American Community Survey Migration Flows documentation","code":"flows <- getCensus(     name = \"acs/flows\",     vintage = 2016,     vars = c(\"MOVEDIN\", \"MOVEDOUT\", \"FULL1_NAME\", \"FULL2_NAME\", \"GEOID2\"),     region = \"county:001\",     regionin = \"state:01\") head(flows) ##   state county MOVEDIN MOVEDOUT              FULL1_NAME              FULL2_NAME ## 1    01    001      70     <NA> Autauga County, Alabama                    Asia ## 2    01    001      51     <NA> Autauga County, Alabama                  Europe ## 3    01    001      36      126 Autauga County, Alabama Baldwin County, Alabama ## 4    01    001       4        0 Autauga County, Alabama Barbour County, Alabama ## 5    01    001       7      135 Autauga County, Alabama    Bibb County, Alabama ## 6    01    001       4        0 Autauga County, Alabama  Blount County, Alabama ##   GEOID2 ## 1     NA ## 2     NA ## 3   1003 ## 4   1005 ## 5   1007 ## 6   1009"},{"path":"/articles/example-masterlist.html","id":"american-community-survey-language-statistics","dir":"Articles","previous_headings":"American Community Survey","what":"American Community Survey Language Statistics","title":"Even more censusapi examples","text":"American Community Survey Language Statistics documentation Get number people New York state speak language.","code":"languages <- getCensus(     name = \"language\",     vintage = 2013,     vars = c(\"EST\", \"LAN\", \"LANLABEL\"),     region = \"state:36\") head(languages) ##   state     EST LAN   LANLABEL ## 1    36 2705225 625    Spanish ## 2    36    <NA> 627     Ladino ## 3    36  133535 620     French ## 4    36    5645 622     Patois ## 5    36    <NA> 624      Cajun ## 6    36   44980 629 Portuguese"},{"path":"/articles/example-masterlist.html","id":"annual-survey-of-entrepreneurs","dir":"Articles","previous_headings":"","what":"Annual Survey of Entrepreneurs","title":"Even more censusapi examples","text":"Annual Survey Entrepreneurs documentation","code":"ase_csa <- getCensus(     name = \"ase/csa\",     vintage = 2014,     vars = c(\"GEO_TTL\", \"NAICS2012\", \"NAICS2012_TTL\", \"EMPSZFI\", \"EMPSZFI_TTL\", \"FIRMPDEMP\"),     region = \"us:*\") head(ase_csa) ##   us       GEO_TTL NAICS2012         NAICS2012_TTL EMPSZFI ## 1  1 United States        00 Total for all sectors     001 ## 2  1 United States        00 Total for all sectors     611 ## 3  1 United States        00 Total for all sectors     612 ## 4  1 United States        00 Total for all sectors     620 ## 5  1 United States        00 Total for all sectors     630 ## 6  1 United States        00 Total for all sectors     641 ##                     EMPSZFI_TTL FIRMPDEMP ## 1                     All firms   5437782 ## 2       Firms with no employees    547115 ## 3   Firms with 1 to 4 employees   2768756 ## 4   Firms with 5 to 9 employees    950224 ## 5 Firms with 10 to 19 employees    585516 ## 6 Firms with 20 to 49 employees    376051 ase_cscb <- getCensus(     name = \"ase/cscb\",     vintage = 2014,     vars = c(\"GEO_TTL\", \"NAICS2012_TTL\", \"ASECB\", \"ASECB_TTL\", \"SPOUSES\", \"SPOUSES_TTL\", \"YEAR\",                       \"FIRMPDEMP\", \"FIRMPDEMP_PCT\", \"RCPPDEMP\", \"RCPPDEMP_F\", \"RCPPDEMP_PCT\",                       \"EMP\", \"EMP_PCT\", \"PAYANN\", \"PAYANN_PCT\", \"FIRMPDEMP_S\", \"FIRMPDEMP_PCT_S\",                       \"RCPPDEMP_S\", \"RCPPDEMP_PCT_S\", \"EMP_S\", \"EMP_PCT_S\", \"PAYANN_S\", \"PAYANN_PCT_S\"),     region = \"us:*\") head(ase_cscb) ##   us       GEO_TTL         NAICS2012_TTL ASECB ASECB_TTL SPOUSES ## 1  1 United States Total for all sectors  0000 All firms      A1 ## 2  1 United States Total for all sectors  0000 All firms      MA ## 3  1 United States Total for all sectors  0000 All firms      LZ ## 4  1 United States Total for all sectors  0000 All firms      MB ## 5  1 United States Total for all sectors  0000 All firms      MC ## 6  1 United States Total for all sectors  0000 All firms      MD ##                                             SPOUSES_TTL YEAR FIRMPDEMP ## 1                                             All firms 2014   5437782 ## 2   Jointly owned but primarily operated by male spouse 2014    336310 ## 3         Jointly owned and equally operated by spouses 2014    335149 ## 4 Jointly owned but primarily operated by female spouse 2014     96475 ## 5                          Not jointly owned by spouses 2014    328625 ## 6                                       Total reporting 2014   1096559 ##   FIRMPDEMP_PCT    RCPPDEMP RCPPDEMP_F RCPPDEMP_PCT       EMP EMP_PCT ## 1           0.0 33036935112       <NA>          0.0 115129295     0.0 ## 2          30.7   603733952       <NA>         18.8   3015332    21.0 ## 3          30.6   493143589       <NA>         15.4   3303608    23.0 ## 4           8.8   140228793       <NA>          4.4    850573     5.9 ## 5          30.0  1966858366       <NA>         61.4   7222018    50.2 ## 6         100.0  3203964700       <NA>        100.0  14391531   100.0 ##       PAYANN PAYANN_PCT FIRMPDEMP_S FIRMPDEMP_PCT_S RCPPDEMP_S RCPPDEMP_PCT_S ## 1 5640982990        0.0         0.0             0.0        0.5            0.0 ## 2  109460428       20.2         0.8             0.3        3.2            1.8 ## 3  104343482       19.2         0.6             0.3        3.7            5.5 ## 4   25984506        4.8         1.9             0.2       12.6            1.1 ## 5  302838280       55.8         0.6             0.5        2.5            8.1 ## 6  542626696      100.0         0.2             0.0        1.8            0.0 ##   EMP_S EMP_PCT_S PAYANN_S PAYANN_PCT_S ## 1   0.3       0.0      0.3          0.0 ## 2   1.8       3.5      3.0          3.5 ## 3   1.7       6.2      1.8          5.5 ## 4   3.6       0.6      4.7          0.3 ## 5   1.6      10.3      1.9          9.0 ## 6   0.9       0.0      1.3          0.0 ase_cscbo <- getCensus(     name = \"ase/cscbo\",     vintage = 2014,     vars = c(\"GEO_TTL\", \"NAICS2012_TTL\", \"ASECBO\", \"ASECBO_TTL\", \"ACQBUS\", \"ACQBUS_TTL\",                       \"YEAR\", \"OWNPDEMP\", \"OWNPDEMP_PCT\", \"OWNPDEMP_S\", \"OWNPDEMP_PCT_S\"),     region = \"us:*\") head(ase_cscbo) ##   us       GEO_TTL         NAICS2012_TTL ASECBO                     ASECBO_TTL ## 1  1 United States Total for all sectors     00 All owners of respondent firms ## 2  1 United States Total for all sectors     00 All owners of respondent firms ## 3  1 United States Total for all sectors     00 All owners of respondent firms ## 4  1 United States Total for all sectors     00 All owners of respondent firms ## 5  1 United States Total for all sectors     00 All owners of respondent firms ## 6  1 United States Total for all sectors     00 All owners of respondent firms ##   ACQBUS                    ACQBUS_TTL YEAR OWNPDEMP OWNPDEMP_PCT OWNPDEMP_S ## 1     CA            Founded or started 2014  4063687         70.4        0.2 ## 2     CB                     Purchased 2014  1211902         21.0        0.5 ## 3     CC                     Inherited 2014   227408          3.9        1.7 ## 4     CD Transfer of ownership or gift 2014   405356          7.0        0.6 ## 5     CE               Total reporting 2014  5768389        100.0        0.2 ## 6     CF             Item not reported 2014    14476          0.0        7.3 ##   OWNPDEMP_PCT_S ## 1            0.3 ## 2            0.2 ## 3            0.1 ## 4            0.1 ## 5            0.0 ## 6            0.0"},{"path":"/articles/example-masterlist.html","id":"annual-survey-of-manufactures","dir":"Articles","previous_headings":"","what":"Annual Survey of Manufactures","title":"Even more censusapi examples","text":"Annual Survey Manufactures documentation","code":"asm_state <- getCensus(     name = \"timeseries/asm/state\",     vars = c(\"GEO_TTL\", \"NAICS_TTL\", \"EMP\"),     region = \"state:*\",     time = 2016,     naics = \"31-33\") head(asm_state) ##   time state    GEO_TTL     NAICS_TTL     EMP NAICS ## 1 2016    01    Alabama Manufacturing  234803 31-33 ## 2 2016    02     Alaska Manufacturing   12178 31-33 ## 3 2016    56    Wyoming Manufacturing    8377 31-33 ## 4 2016    04    Arizona Manufacturing  136946 31-33 ## 5 2016    05   Arkansas Manufacturing  145733 31-33 ## 6 2016    06 California Manufacturing 1119896 31-33 asm_product <- getCensus(     name = \"timeseries/asm/product\",     vars = c(\"PSCODE_TTL\", \"GEO_TTL\", \"PRODVAL\"),     region = \"us:*\",     time = 2016,     pscode = 311111) head(asm_product) ##   time us                     PSCODE_TTL       GEO_TTL  PRODVAL PSCODE ## 1 2016  1 Dog and cat food manufacturing United States 22933334 311111"},{"path":"/articles/example-masterlist.html","id":"county-business-patterns-and-nonemployer-statistics","dir":"Articles","previous_headings":"","what":"County Business Patterns and Nonemployer Statistics","title":"Even more censusapi examples","text":"County Business Patterns Nonemployer Statistics documentation","code":""},{"path":"/articles/example-masterlist.html","id":"county-business-patterns","dir":"Articles","previous_headings":"County Business Patterns and Nonemployer Statistics","what":"County Business Patterns","title":"Even more censusapi examples","text":"County Business Patterns documentation Get employment data construction industry. Get employment data state companies 1,000 employees.","code":"cbp_2018 <- getCensus(     name = \"cbp\",     vintage = 2018,     vars = c(\"EMP\", \"ESTAB\"),     region = \"state:*\",     NAICS2017 = 23) head(cbp_2018) ##   state    EMP ESTAB NAICS2017 ## 1    28  43156  3890        23 ## 2    29 129188 13540        23 ## 3    30  26859  5656        23 ## 4    31  49552  6527        23 ## 5    32  80043  5146        23 ## 6    33  29049  4245        23 cbp_2008 <- getCensus(     name = \"cbp\",     vintage = 2008,     vars = c(\"YEAR\", \"GEO_TTL\", \"EMPSZES_TTL\", \"EMP\", \"ESTAB\", \"PAYANN\"),     region = \"state:*\",     EMPSZES = 260) head(cbp_2008) ##   state YEAR    GEO_TTL                                 EMPSZES_TTL     EMP ## 1    01 2008    Alabama Establishments with 1,000 employees or more  175438 ## 2    02 2008     Alaska Establishments with 1,000 employees or more   22598 ## 3    04 2008    Arizona Establishments with 1,000 employees or more  301091 ## 4    05 2008   Arkansas Establishments with 1,000 employees or more  124452 ## 5    06 2008 California Establishments with 1,000 employees or more 1872632 ## 6    08 2008   Colorado Establishments with 1,000 employees or more  285608 ##   ESTAB    PAYANN EMPSZES ## 1    96   8034522     260 ## 2    16   1469718     260 ## 3   124  17089056     260 ## 4    68   4796665     260 ## 5   797 124024587     260 ## 6   120  14946331     260"},{"path":"/articles/example-masterlist.html","id":"zip-codes-business-patterns","dir":"Articles","previous_headings":"County Business Patterns and Nonemployer Statistics","what":"Zip Codes Business Patterns","title":"Even more censusapi examples","text":"Zip Codes Business Patterns documentation","code":"zbp_2018 <- getCensus(     name = \"zbp\",     vintage = 2018,     vars = c(\"EMP\", \"ESTAB\", \"EMPSZES\"),     region = \"zipcode:90210\") head(zbp_2018) ##   zip_code   EMP ESTAB EMPSZES ## 1    90210 35324  2496     001 ## 2    90210     0  1758     210 ## 3    90210     0   322     220 ## 4    90210     0   199     230 ## 5    90210     0   137     241 ## 6    90210     0    50     242"},{"path":"/articles/example-masterlist.html","id":"nonemployer-statistics","dir":"Articles","previous_headings":"County Business Patterns and Nonemployer Statistics","what":"Nonemployer statistics","title":"Even more censusapi examples","text":"Nonemployer statistics documentation","code":"nonemp <- getCensus(     name = \"nonemp\",     vintage = 2016,     vars = c(\"GEO_TTL\", \"NRCPTOT\", \"NAICS2012_TTL\"),     region = \"state:*\",     naics2012 = 54) head(nonemp) ##   state    GEO_TTL  NRCPTOT                                    NAICS2012_TTL ## 1    01    Alabama  1284130 Professional, scientific, and technical services ## 2    02     Alaska   265996 Professional, scientific, and technical services ## 3    04    Arizona  2991782 Professional, scientific, and technical services ## 4    05   Arkansas   616936 Professional, scientific, and technical services ## 5    06 California 28746664 Professional, scientific, and technical services ## 6    08   Colorado  3709131 Professional, scientific, and technical services ##   NAICS2012 ## 1        54 ## 2        54 ## 3        54 ## 4        54 ## 5        54 ## 6        54"},{"path":"/articles/example-masterlist.html","id":"decennial-census","dir":"Articles","previous_headings":"","what":"Decennial Census","title":"Even more censusapi examples","text":"Decennial Census documentation Get total population number housing units metropolitan/micropolitan statistical areas 2010. Get urban/rural status group variables (P2) metropolitan/micropolitan statistical areas 2010. Get 2010 population block group within specific tract.","code":"data2010 <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = c(\"NAME\", \"P001001\", \"H010001\"),      region = \"metropolitan statistical area/micropolitan statistical area:*\") head(data2010) ##   metropolitan_statistical_area_micropolitan_statistical_area ## 1                                                       31540 ## 2                                                       31580 ## 3                                                       36820 ## 4                                                       36860 ## 5                                                       36900 ## 6                                                       36940 ##                             NAME P001001 H010001 ## 1         Madison, WI Metro Area  568593  554078 ## 2    Madisonville, KY Micro Area   46920   45834 ## 3       Oskaloosa, IA Micro Area   22381   21722 ## 4 Ottawa-Streator, IL Micro Area  154908  151500 ## 5         Ottumwa, IA Micro Area   35625   34758 ## 6        Owatonna, MN Micro Area   36576   35982 # Show variable metadata for the P2 group group_p2 <- listCensusMetadata(     name = \"dec/sf1\",     vintage = 2010,     type = \"variables\",     group = \"P2\")  # Get the P2 variable group (URBAN AND RURAL) data2010 <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = \"group(P2)\",      region = \"metropolitan statistical area/micropolitan statistical area:*\") head(data2010) ##   metropolitan_statistical_area_micropolitan_statistical_area         GEO_ID ## 1                                                       31540 310M100US31540 ## 2                                                       31580 310M100US31580 ## 3                                                       36820 310M100US36820 ## 4                                                       36860 310M100US36860 ## 5                                                       36900 310M100US36900 ## 6                                                       36940 310M100US36940 ##   P002001 P002002 P002003 P002004 P002005 P002006 ## 1  568593  455002  401661   53341  113591       0 ## 2   46920   24809       0   24809   22111       0 ## 3   22381   12545       0   12545    9836       0 ## 4  154908   94406       0   94406   60502       0 ## 5   35625   24771       0   24771   10854       0 ## 6   36576   25394       0   25394   11182       0 ##                             NAME P002001ERR ## 1         Madison, WI Metro Area         NA ## 2    Madisonville, KY Micro Area         NA ## 3       Oskaloosa, IA Micro Area         NA ## 4 Ottawa-Streator, IL Micro Area         NA ## 5         Ottumwa, IA Micro Area         NA ## 6        Owatonna, MN Micro Area         NA tract_pop <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = \"P001001\",      region = \"block:*\",     regionin = \"state:36+county:027+tract:010000\") head(tract_pop) ##   state county  tract block P001001 ## 1    36    027 010000  1000      31 ## 2    36    027 010000  1011      17 ## 3    36    027 010000  1028      41 ## 4    36    027 010000  1001       0 ## 5    36    027 010000  1031       0 ## 6    36    027 010000  1002       4"},{"path":"/articles/example-masterlist.html","id":"decennial-census-self-response-rates","dir":"Articles","previous_headings":"Decennial Census","what":"Decennial Census Self-Response Rates","title":"Even more censusapi examples","text":"Decennial Census Self-Response Rates documentation Get self-response rates 2020 2010 Decennial Census state, county, tract, place . Get overall internet reponse rates counties. Get response rates places (cities, towns, etc) within New York state. Get final 2010 Decennial Census self-response rates.","code":"county_responses <- getCensus(     name = \"dec/responserate\",     vintage = 2020,     vars = c(\"NAME\", \"RESP_DATE\", \"CRRALL\", \"CRRINT\"),     region = \"county:*\") head(county_responses) ##   state county                        NAME  RESP_DATE CRRALL CRRINT ## 1    21    137    Lincoln County, Kentucky 2021-01-29   69.1   26.7 ## 2    21    139 Livingston County, Kentucky 2021-01-29   62.6   32.7 ## 3    21    143       Lyon County, Kentucky 2021-01-29   55.6   24.1 ## 4    21    145  McCracken County, Kentucky 2021-01-29   71.9   56.7 ## 5    21    149     McLean County, Kentucky 2021-01-29   63.8   26.2 ## 6    21    151    Madison County, Kentucky 2021-01-29   72.2   60.3 ny_place_responses <- getCensus(     name = \"dec/responserate\",     vintage = 2020,     vars = c(\"NAME\", \"RESP_DATE\", \"CRRALL\", \"CRRINT\"),     region = \"place:*\",     regionin = \"state:36\") head(ny_place_responses) ##   state place                         NAME  RESP_DATE CRRALL CRRINT ## 1    36 23745       Elba village, New York 2021-01-29   66.3   52.9 ## 2    36 23965 Ellenville village, New York 2021-01-29   58.5   45.3 ## 3    36 24075  Ellisburg village, New York 2021-01-29   52.6   18.1 ## 4    36 24229        Elmira city, New York 2021-01-29   60.1   40.8 ## 5    36 24295   Elmsford village, New York 2021-01-29   62.9   55.1 ## 6    36 24515   Endicott village, New York 2021-01-29   58.4   45.1 county_responses_2010 <- getCensus(     name = \"dec/responserate\",     vintage = 2010,     vars = c(\"NAME\", \"FSRR2010\"),     region = \"county:*\") head(county_responses_2010) ##   state county                    NAME FSRR2010 ## 1    01    001 Autauga County, Alabama     68.6 ## 2    01    003 Baldwin County, Alabama     59.4 ## 3    01    005 Barbour County, Alabama     55.2 ## 4    01    007    Bibb County, Alabama     54.8 ## 5    01    009  Blount County, Alabama     66.3 ## 6    01    011 Bullock County, Alabama     34.0"},{"path":"/articles/example-masterlist.html","id":"decennial-census-surname-files","dir":"Articles","previous_headings":"Decennial Census","what":"Decennial Census Surname Files","title":"Even more censusapi examples","text":"Decennial Census Surname documentation Get counts top 25 popular surnames share race.","code":"top_surnames <- getCensus(     name = \"surname\",     vintage = 2010,     vars = c(\"NAME\", \"COUNT\", \"PROP100K\", \"PCTWHITE\", \"PCTBLACK\", \"PCTAIAN\", \"PCTAPI\", \"PCTHISPANIC\", \"PCT2PRACE\"),     RANK = \"1:25\") head(top_surnames) ##       NAME   COUNT PROP100K PCTWHITE PCTBLACK PCTAIAN PCTAPI PCTHISPANIC ## 1 ANDERSON  784404   265.92    75.17    18.93    0.74   0.61        2.44 ## 2    BROWN 1437026   487.16    57.95     35.6    0.87   0.51        2.52 ## 3    DAVIS 1116357   378.45     62.2     31.6    0.82   0.49        2.44 ## 4   GARCIA 1166120   395.32     5.38     0.45    0.47   1.41       92.03 ## 5 GONZALEZ  841025   285.11     4.03     0.35    0.14   0.38       94.97 ## 6   HARRIS  624252   211.63     51.4    42.39    0.67   0.47        2.26 ##   PCT2PRACE RANK ## 1      2.11   15 ## 2      2.55    4 ## 3      2.45    8 ## 4      0.26    6 ## 5      0.13   13 ## 6      2.80   25"},{"path":"/articles/example-masterlist.html","id":"economic-census","dir":"Articles","previous_headings":"","what":"Economic Census","title":"Even more censusapi examples","text":"Economic Census documentation","code":"ewks_2012 <- getCensus(     name = \"ewks\",     vintage = 2012,     vars = c(\"EMP\", \"OPTAX\", \"GEOTYPE\"),     region = \"state:*\",     naics2012 = 54) head(ewks_2012) ##   state   EMP OPTAX GEOTYPE NAICS2012 ## 1    01 89988    A       02        54 ## 2    01 88566    T       02        54 ## 3    01  1422    Y       02        54 ## 4    02 17648    A       02        54 ## 5    02 17328    T       02        54 ## 6    02   320    Y       02        54 ewks_2007 <- getCensus(     name = \"ewks\",     vintage = 2007,     vars = c(\"EMP\", \"OPTAX\", \"GEOTYPE\"),     region = \"state:*\",     naics2007 = 54) head(ewks_2007) ##   state   EMP OPTAX GEOTYPE NAICS2007 ## 1    01 94051     A       2        54 ## 2    01 92759     T       2        54 ## 3    01  1292     Y       2        54 ## 4    02 12843     A       2        54 ## 5    02 12509     T       2        54 ## 6    02   334     Y       2        54"},{"path":"/articles/example-masterlist.html","id":"economic-indicators","dir":"Articles","previous_headings":"","what":"Economic Indicators","title":"Even more censusapi examples","text":"Economic Indicators documentation","code":"eits <- getCensus(     name = \"timeseries/eits/resconst\",     vars = c(\"cell_value\", \"data_type_code\", \"time_slot_id\", \"error_data\", \"category_code\", \"seasonally_adj\"),     region = \"us:*\",     time = \"from 2004-05 to 2012-12\") head(eits) ##   cell_value data_type_code time_slot_id error_data category_code ## 1        367          MULTI          653         no  ACOMPLETIONS ## 2       1893          TOTAL          653         no  ACOMPLETIONS ## 3       1505         SINGLE          653         no  ACOMPLETIONS ## 4         11        E_MULTI          653        yes  ACOMPLETIONS ## 5          4        E_TOTAL          653        yes  ACOMPLETIONS ## 6          4       E_SINGLE          653        yes  ACOMPLETIONS ##   seasonally_adj    time us ## 1            yes 2004-05  1 ## 2            yes 2004-05  1 ## 3            yes 2004-05  1 ## 4            yes 2004-05  1 ## 5            yes 2004-05  1 ## 6            yes 2004-05  1"},{"path":"/articles/example-masterlist.html","id":"health-insurance-small-area-health-insurance-estimates","dir":"Articles","previous_headings":"","what":"Health Insurance: Small Area Health Insurance Estimates","title":"Even more censusapi examples","text":"Health Insurance Statistics documentation Get uninsured rate income group Alabama single year. Get uninsured rate Alabama multiple years. Get uninsured rate non-elderly adults incomes 138 400% poverty line, race state.","code":"sahie <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),     region = \"state:01\",     year = 2019) head(sahie) ##   state    NAME IPRCAT                IPR_DESC PCTUI_PT YEAR ## 1    01 Alabama      0             All Incomes     11.6 2019 ## 2    01 Alabama      1      <= 200% of Poverty     18.9 2019 ## 3    01 Alabama      2      <= 250% of Poverty     18.0 2019 ## 4    01 Alabama      3      <= 138% of Poverty     19.9 2019 ## 5    01 Alabama      4      <= 400% of Poverty     15.1 2019 ## 6    01 Alabama      5 138% to 400% of Poverty     12.5 2019 sahie_annual <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\"),     region = \"state:01\",     year = \"2006:2019\") sahie_annual ##    state    NAME PCTUI_PT YEAR ## 1     01 Alabama     15.7 2006 ## 2     01 Alabama     14.6 2007 ## 3     01 Alabama     15.3 2008 ## 4     01 Alabama     15.8 2009 ## 5     01 Alabama     16.9 2010 ## 6     01 Alabama     16.6 2011 ## 7     01 Alabama     15.8 2012 ## 8     01 Alabama     15.9 2013 ## 9     01 Alabama     14.2 2014 ## 10    01 Alabama     11.9 2015 ## 11    01 Alabama     10.8 2016 ## 12    01 Alabama     11.0 2017 ## 13    01 Alabama     11.9 2018 ## 14    01 Alabama     11.6 2019 sahie_nonelderly <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPR_DESC\", \"PCTUI_PT\", \"AGE_DESC\", \"RACECAT\", \"RACE_DESC\"),      region = \"state:*\",      year = 2019,     IPRCAT = 5,     AGECAT = 1) head(sahie_nonelderly) ##   state    NAME                IPR_DESC PCTUI_PT       AGE_DESC RACECAT ## 1    01 Alabama 138% to 400% of Poverty     16.0 18 to 64 years       0 ## 2    01 Alabama 138% to 400% of Poverty     14.5 18 to 64 years       1 ## 3    01 Alabama 138% to 400% of Poverty     15.8 18 to 64 years       2 ## 4    01 Alabama 138% to 400% of Poverty     36.1 18 to 64 years       3 ## 5    02  Alaska 138% to 400% of Poverty     21.1 18 to 64 years       0 ## 6    02  Alaska 138% to 400% of Poverty     16.4 18 to 64 years       1 ##                   RACE_DESC YEAR IPRCAT AGECAT ## 1                 All Races 2019      5      1 ## 2 White alone, not Hispanic 2019      5      1 ## 3 Black alone, not Hispanic 2019      5      1 ## 4       Hispanic (any race) 2019      5      1 ## 5                 All Races 2019      5      1 ## 6 White alone, not Hispanic 2019      5      1"},{"path":"/articles/example-masterlist.html","id":"international-data-base","dir":"Articles","previous_headings":"","what":"International Data Base","title":"Even more censusapi examples","text":"International Data Base documentation Get Census Bureau projections 2020 populations life expectancy birth country. Get predictions population age 2050 Norway ages 10-18. https://api.census.gov/data/timeseries/idb/1year?get=AREA_KM2,NAME,AGE,POP&FIPS=&time=2050","code":"intl_pop <- getCensus(     name = \"timeseries/idb/5year\",     vars = c(\"NAME\", \"FIPS\", \"POP\", \"E0\"),     time = 2020) head(intl_pop) ##   time                 NAME FIPS      POP    E0 ## 1 2020              Andorra   AN    85722 83.03 ## 2 2020 United Arab Emirates   AE  9792173 79.17 ## 3 2020          Afghanistan   AF 36594776 52.84 ## 4 2020  Antigua and Barbuda   AC    98012 77.31 ## 5 2020             Anguilla   AV    18066 81.79 ## 6 2020              Albania   AL  3080930 78.99 norway_pop <- getCensus(     name = \"timeseries/idb/1year\",     vars = c(\"NAME\", \"POP\"),     time = 2050,     FIPS = \"NO\",     AGE = \"10:18\") head(norway_pop) ##   time   NAME   POP FIPS AGE ## 1 2050 Norway 66797   NO  10 ## 2 2050 Norway 66877   NO  11 ## 3 2050 Norway 66975   NO  12 ## 4 2050 Norway 67090   NO  13 ## 5 2050 Norway 67258   NO  14 ## 6 2050 Norway 67513   NO  15"},{"path":"/articles/example-masterlist.html","id":"international-trade","dir":"Articles","previous_headings":"","what":"International Trade","title":"Even more censusapi examples","text":"International Trade documentation Note: international trade datasets buggy frequently give general error message “error running query. ’ve logged error ’ll correct ASAP. Sorry inconvenience.” error message comes U.S. Census Bureau. run repeated issues inconsistencies, contact Census Bureau help consider using bulk data download instead. Get general imports value imports consumption value end-use codes countries January 2018.","code":"imports <- getCensus(     name = \"timeseries/intltrade/imports/enduse\",     vars = c(\"CTY_CODE\", \"CTY_NAME\", \"I_ENDUSE\", \"I_ENDUSE_LDESC\", \"GEN_VAL_MO\", \"CON_VAL_MO\"),     time = \"2018-01\") head(imports) ##      time CTY_CODE                CTY_NAME I_ENDUSE ## 1 2018-01        - TOTAL FOR ALL COUNTRIES        - ## 2 2018-01     0001                    OPEC        - ## 3 2018-01     0003          EUROPEAN UNION        - ## 4 2018-01     0014   PACIFIC RIM COUNTRIES        - ## 5 2018-01     0017                CAFTA-DR        - ## 6 2018-01     0020                   NAFTA        - ##                        I_ENDUSE_LDESC   GEN_VAL_MO   CON_VAL_MO ## 1 TOTAL IMPORTS FOR ALL END-USE CODES 203028883846 201363447994 ## 2 TOTAL IMPORTS FOR ALL END-USE CODES   5811776722   5077058800 ## 3 TOTAL IMPORTS FOR ALL END-USE CODES  32324828722  32147782489 ## 4 TOTAL IMPORTS FOR ALL END-USE CODES  75627219017  74486177148 ## 5 TOTAL IMPORTS FOR ALL END-USE CODES   1745667404   1730840561 ## 6 TOTAL IMPORTS FOR ALL END-USE CODES  51972571108  51987882777"},{"path":"/articles/example-masterlist.html","id":"population-estimates-and-projections","dir":"Articles","previous_headings":"","what":"Population Estimates and Projections","title":"Even more censusapi examples","text":"Population Estimates Projections documentation","code":""},{"path":"/articles/example-masterlist.html","id":"population-estimates","dir":"Articles","previous_headings":"Population Estimates and Projections","what":"Population Estimates","title":"Even more censusapi examples","text":"Population Estimates documentation Note variable names data structure PEP APIs always consistent year year.","code":"popest <- getCensus(     name = \"pep/population\",     vintage = 2019,     vars = c(\"POP\", \"DATE_DESC\"),     region = \"state:*\") head(popest) ##   state      POP                    DATE_DESC ## 1    01  4903185 7/1/2019 population estimate ## 2    02   731545 7/1/2019 population estimate ## 3    04  7278717 7/1/2019 population estimate ## 4    05  3017804 7/1/2019 population estimate ## 5    06 39512223 7/1/2019 population estimate ## 6    08  5758736 7/1/2019 population estimate popest_housing <- getCensus(     name = \"pep/housing\",     vintage = 2018,     vars = c(\"DATE_CODE\", \"DATE_DESC\", \"HUEST\"),     region = \"county:195\",     regionin = \"state:02\") head(popest_housing) ##   state county DATE_CODE                            DATE_DESC HUEST ## 1    02    195         1   4/1/2010 Census housing unit count  1994 ## 2    02    195         2 4/1/2010 housing unit estimates base  1644 ## 3    02    195         3       7/1/2010 housing unit estimate  1646 ## 4    02    195         4       7/1/2011 housing unit estimate  1647 ## 5    02    195         5       7/1/2012 housing unit estimate  1659 ## 6    02    195         6       7/1/2013 housing unit estimate  1662"},{"path":"/articles/example-masterlist.html","id":"population-projections","dir":"Articles","previous_headings":"Population Estimates and Projections","what":"Population Projections","title":"Even more censusapi examples","text":"Population Projections documentation","code":"popproj <- getCensus(     name = \"pep/projpop\",     vintage = 2014,     vars = c(\"YEAR\", \"POP\", \"AGE\"),     region = \"us:1\") head(popproj) ##   us YEAR     POP AGE ## 1  1 2014 3971847   0 ## 2  1 2014 3957864   1 ## 3  1 2014 3972081   2 ## 4  1 2014 4003272   3 ## 5  1 2014 4001929   4 ## 6  1 2014 4002977   5"},{"path":"/articles/example-masterlist.html","id":"poverty-statistics","dir":"Articles","previous_headings":"","what":"Poverty Statistics","title":"Even more censusapi examples","text":"Poverty Statistics documentation","code":""},{"path":"/articles/example-masterlist.html","id":"current-population-survey-poverty-statistics","dir":"Articles","previous_headings":"Poverty Statistics","what":"Current Population Survey Poverty Statistics","title":"Even more censusapi examples","text":"Get national poverty rates race past 50 years.","code":"poverty <- getCensus(     name = \"timeseries/poverty/histpov2\",     vars = c(\"RACE\", \"PCTPOV\"),     region = \"us:*\",     time = \"from 1970 to 2020\") head(poverty) ##   time us RACE PCTPOV ## 1 2020  1    1   11.4 ## 2 2020  1    2   10.1 ## 3 2020  1    4    8.2 ## 4 2020  1    6   19.3 ## 5 2020  1    7   19.5 ## 6 2020  1    9    8.0"},{"path":"/articles/example-masterlist.html","id":"small-area-income-and-poverty-estimates-saipe","dir":"Articles","previous_headings":"Poverty Statistics","what":"Small Area Income and Poverty Estimates (SAIPE)","title":"Even more censusapi examples","text":"Get poverty rate children overall single year. Get poverty rate children overall single county time.","code":"saipe <- getCensus(     name = \"timeseries/poverty/saipe\",     vars = c(\"NAME\", \"SAEPOVRT0_17_PT\", \"SAEPOVRTALL_PT\"),     region = \"state:*\",     year = 2019) head(saipe) ##   state       NAME SAEPOVRT0_17_PT SAEPOVRTALL_PT YEAR ## 1    01    Alabama            21.9           15.6 2019 ## 2    02     Alaska            13.2           10.2 2019 ## 3    04    Arizona            19.2           13.5 2019 ## 4    05   Arkansas            21.7           16.0 2019 ## 5    06 California            15.6           11.8 2019 ## 6    08   Colorado            11.2            9.4 2019 saipe_years <- getCensus(     name = \"timeseries/poverty/saipe\",     vars = c(\"NAME\", \"SAEPOVRT0_17_PT\", \"SAEPOVRTALL_PT\"),     region = \"county:001\",     regionin = \"state:12\",     year = \"2000:2019\") head(saipe_years) ##   state county           NAME SAEPOVRT0_17_PT SAEPOVRTALL_PT YEAR ## 1    12    001 Alachua County            17.4           14.7 2000 ## 2    12    001 Alachua County            18.3           15.1 2001 ## 3    12    001 Alachua County            17.6           15.1 2002 ## 4    12    001 Alachua County            19.8           16.2 2003 ## 5    12    001 Alachua County            16.9           14.5 2004 ## 6    12    001 Alachua County            22.8           21.8 2005"},{"path":"/articles/example-masterlist.html","id":"saipe-school-districts","dir":"Articles","previous_headings":"Poverty Statistics","what":"SAIPE School Districts","title":"Even more censusapi examples","text":"Get number (SAEPOV5_17V_PT) rate (SAEPOVRAT5_17RV_PT) children ages 5-17 living poverty unified school districts Massachusetts.","code":"saipe_schools <- getCensus(     name = \"timeseries/poverty/saipe/schdist\",     vars = c(\"SD_NAME\", \"SAEPOV5_17V_PT\", \"SAEPOVRAT5_17RV_PT\"),     region = \"school district (unified):*\",     regionin = \"state:25\",     year = 2019) head(saipe_schools) ##   state school_district_unified ## 1    25                   00001 ## 2    25                   00002 ## 3    25                   00013 ## 4    25                   00067 ## 5    25                   00542 ## 6    25                   00544 ##                                                SD_NAME SAEPOV5_17V_PT ## 1                              Quabbin School District           2852 ## 2              Spencer-East Brookfield School District           2073 ## 3 Southwick-Tolland-Granville Regional School District           1847 ## 4            Manchester Essex Regional School District           1555 ## 5                         Ayer-Shirley School District           2173 ## 6                     Monomoy Regional School District           1744 ##   SAEPOVRAT5_17RV_PT YEAR ## 1                7.9 2019 ## 2                9.9 2019 ## 3                7.1 2019 ## 4                3.9 2019 ## 5                5.6 2019 ## 6               11.1 2019"},{"path":"/articles/example-masterlist.html","id":"public-sector-statistics","dir":"Articles","previous_headings":"","what":"Public Sector Statistics","title":"Even more censusapi examples","text":"Public Sector Statistics documentation endpoint includes data multiple surveys organized sure read Census Bureau’s documentation variable definitions labels. Get expenditures Public Elementary-Secondary School System Finances Massachusetts.","code":"govs <- getCensus(     name = \"timeseries/govs\",     vars = c(\"SVY_COMP_LABEL\", \"AGG_DESC\", \"AGG_DESC_LABEL\" ,\"AMOUNT\"),     region = \"state:25\",     year = \"2020\",     SVY_COMP = \"06\",     EXPENDTYPE = \"001\") head(govs) ##   state                         SVY_COMP_LABEL AGG_DESC ## 1    25 Annual Survey of School System Finance   SS0601 ## 2    25 Annual Survey of School System Finance   SS0604 ## 3    25 Annual Survey of School System Finance   SS0610 ## 4    25 Annual Survey of School System Finance   SS0701 ## 5    25 Annual Survey of School System Finance   SS0702 ## 6    25 Annual Survey of School System Finance   SS0703 ##                                                               AGG_DESC_LABEL ## 1                                                     Total current spending ## 2                                     Current spending - Instruction - Total ## 3                                     Current spending - All other functions ## 4                                Current spending - Support services - Total ## 5               Current spending - Support services - Pupil support services ## 6 Current spending - Support services - Instructional staff support services ##     AMOUNT YEAR SVY_COMP EXPENDTYPE ## 1 18243103 2020       06        001 ## 2 11837313 2020       06        001 ## 3   506940 2020       06        001 ## 4  5898850 2020       06        001 ## 5  1469771 2020       06        001 ## 6   810758 2020       06        001"},{"path":"/articles/example-masterlist.html","id":"quarterly-workforce-indicators","dir":"Articles","previous_headings":"","what":"Quarterly Workforce Indicators","title":"Even more censusapi examples","text":"Quarterly Workforce Indicators documentation QWI endpoints allow simple calls specfic ones. Make sure read documentation closely. ’s simple call gets employment data county. Got total employment average earnings quarter single state. ’s much specific call. Read Census Bureau’s documentation closely see options allowed QWI APIs.","code":"qwi_counties <- getCensus(     name = \"timeseries/qwi/sa\",     vars = c(\"Emp\", \"EarnBeg\"),     region = \"county:*\",     regionin = \"state:01\",     time = \"2016-Q1\") head(qwi_counties) ##     Emp EarnBeg    time state county ## 1 11366    2751 2016-Q1    01    001 ## 2 66146    2643 2016-Q1    01    003 ## 3  7840    2570 2016-Q1    01    005 ## 4  4008    2921 2016-Q1    01    007 ## 5  8127    2647 2016-Q1    01    009 ## 6  2684    2387 2016-Q1    01    011 qwi_time <- getCensus(     name = \"timeseries/qwi/sa\",     vars = c(\"Emp\", \"EarnBeg\"),     region = \"state:01\",     time = \"from 2018 to 2022\") head(qwi_time) ##       Emp EarnBeg    time state ## 1 1881745    3515 2018-Q1    01 ## 2 1891438    3471 2018-Q2    01 ## 3 1911704    3434 2018-Q3    01 ## 4 1908636    3687 2018-Q4    01 ## 5 1913671    3597 2019-Q1    01 ## 6 1919022    3578 2019-Q2    01 qwi <- getCensus(     name = \"timeseries/qwi/sa\",     region = \"state:02\",     vars = c(\"Emp\", \"sex\"),     time = 2012,     quarter = 1,     agegrp = \"A07\",     ownercode = \"A05\",     firmsize = 1,     seasonadj = \"U\",     industry = 21) qwi ##   Emp sex    time quarter agegrp ownercode firmsize seasonadj industry state ## 1  54   0 2012-Q1       1    A07       A05        1         U       21    02 ## 2  48   1 2012-Q1       1    A07       A05        1         U       21    02 ## 3   6   2 2012-Q1       1    A07       A05        1         U       21    02"},{"path":"/articles/example-masterlist.html","id":"the-planning-database","dir":"Articles","previous_headings":"","what":"The Planning Database","title":"Even more censusapi examples","text":"Planning Database documentation Get population 2010 Census mail return rates block groups Autauga County, AL.","code":"pdb <- getCensus(     name = \"pdb/blockgroup\",     vintage = 2018,     vars = c(\"GIDBG\", \"County_name\", \"State_name\", \"Tot_Population_CEN_2010\", \"Mail_Return_Rate_CEN_2010\"),     region = \"block group:*\",     regionin = \"state:01+county:001\") head(pdb) ##      County_name State_name Tot_Population_CEN_2010 Mail_Return_Rate_CEN_2010 ## 1 Autauga County    Alabama                     570                      79.7 ## 2 Autauga County    Alabama                    1737                      84.6 ## 3 Autauga County    Alabama                    7023                      72.8 ## 4 Autauga County    Alabama                    2006                      86.0 ## 5 Autauga County    Alabama                    2423                      87.8 ## 6 Autauga County    Alabama                    1245                      73.4 ##   state county  tract block_group       GIDBG ## 1    01    001 020400           4 10010204004 ## 2    01    001 020500           1 10010205001 ## 3    01    001 020500           2 10010205002 ## 4    01    001 020500           3 10010205003 ## 5    01    001 020600           1 10010206001 ## 6    01    001 020600           2 10010206002"},{"path":"/articles/example-masterlist.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Even more censusapi examples","text":"product uses Census Bureau Data API endorsed certified Census Bureau.","code":""},{"path":"/articles/getting-started.html","id":"api-key-setup","dir":"Articles","previous_headings":"","what":"API key setup","title":"Getting started with censusapi","text":"use Census APIs, sign API key, sent provided email address. ’ll need key use package. censusapi use default without extra work part. Within R, run: ’ve added census key system environment, censusapi use default without extra work part. instances might want put key .Renviron - example, ’re shared school computer. can always choose manually set key = \"YOURKEY\" argument getCensus() prefer.","code":"# Add key to .Renviron Sys.setenv(CENSUS_KEY=YOURKEYHERE) # Reload .Renviron readRenviron(\"~/.Renviron\") # Check to see that the expected key is output in your R console Sys.getenv(\"CENSUS_KEY\")"},{"path":"/articles/getting-started.html","id":"finding-your-api","dir":"Articles","previous_headings":"","what":"Finding your API","title":"Getting started with censusapi","text":"get started, load censusapi library. Census APIs 200 endpoints, covering dozens different datasets. see current table every available endpoint, run listCensusApis: returns useful information endpoint, including name, ’ll need make API call.","code":"library(censusapi) apis <- listCensusApis() View(apis)"},{"path":"/articles/getting-started.html","id":"using-getcensus","dir":"Articles","previous_headings":"","what":"Using getCensus","title":"Getting started with censusapi","text":"main function censusapi getCensus, makes API call given Census API returns data frame results. API slightly different parameters, always required arguments: name: name API defined Census, like “acs5” “timeseries/bds/firms” vintage: dataset year, generally required non-timeseries APIs vars: list variable names get region: geography level return, like state county APIs additional required optional arguments, like time, monthly, period. Check specific documentation API see options allowed. Let’s walk example getting uninsured rates income group using Small Area Health Insurance Estimates API, provides detailed annual state-level county-level estimates health insurance rates.","code":""},{"path":"/articles/getting-started.html","id":"choosing-variables","dir":"Articles","previous_headings":"Using getCensus","what":"Choosing variables","title":"Getting started with censusapi","text":"censusapi includes metadata function called listCensusMetadata get information API’s variable options geography options. Let’s see variables available SAHIE API: ’ll use variables get uninsured rates income group: IPRCAT: Income Poverty Ratio Category IPR_DESC: Income Poverty Ratio Category Description PCTUI_PT: Percent Uninsured Demographic Group Selected Income Range, Estimate NAME: Name geography returned (e.g. state county name)","code":"sahie_vars <- listCensusMetadata(     name = \"timeseries/healthins/sahie\",      type = \"variables\") head(sahie_vars) ##        name ## 1 NIPR_LB90 ## 2   NIPR_PT ## 3    AGECAT ## 4    NIC_PT ## 5     GEOID ## 6     STATE ##                                                                                            label ## 1 Number in Demographic Group for Selected Income Range, Lower Bound for 90% Confidence Interval ## 2                                Number in Demographic Group for Selected Income Range, Estimate ## 3                                                                                   Age Category ## 4                                                                       Number Insured, Estimate ## 5                                                                         State+County FIPS Code ## 6                                                                                State FIPS Code ##               concept predicateType group limit          required ## 1 Uncertainty Measure           int   N/A     0              <NA> ## 2            Estimate           int   N/A     0              <NA> ## 3      Demographic ID           int   N/A     6 default displayed ## 4            Estimate           int   N/A     0              <NA> ## 5 Uncertainty Measure           int   N/A     0              <NA> ## 6       Geographic ID           int   N/A     0              <NA>"},{"path":"/articles/getting-started.html","id":"choosing-regions","dir":"Articles","previous_headings":"Using getCensus","what":"Choosing regions","title":"Getting started with censusapi","text":"can also use listCensusMetadata see geographic levels can get data using SAHIE API. API three geographic levels: us, county within states, state. First, using getCensus, let’s get uninsured rate income group national level 2018. can also get data state level every state changing region \"state:*\": Finally, can get county-level data. geography metadata showed can choose get county-level data within states. ’ll use region specify county-level results regionin request data Alabama Alaska. SAHIE API timeseries (indicated name), can get multiple years data using year argument. ’s simple chart yearly data using ggplot2 package.","code":"listCensusMetadata(     name = \"timeseries/healthins/sahie\",      type = \"geography\") ##     name geoLevelId limit referenceDate requires wildcard optionalWithWCFor ## 1     us        010     1    2015-01-01     NULL     NULL              <NA> ## 2 county        050  3142    2015-01-01    state    state             state ## 3  state        040    52    2015-01-01     NULL     NULL              <NA> sahie_national <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),      region = \"us:*\",      year = 2019) sahie_national ##   us          NAME IPRCAT                IPR_DESC PCTUI_PT YEAR ## 1  1 United States      0             All Incomes     10.8 2019 ## 2  1 United States      1      <= 200% of Poverty     18.0 2019 ## 3  1 United States      2      <= 250% of Poverty     17.5 2019 ## 4  1 United States      3      <= 138% of Poverty     18.1 2019 ## 5  1 United States      4      <= 400% of Poverty     15.2 2019 ## 6  1 United States      5 138% to 400% of Poverty     13.8 2019 sahie_states <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),      region = \"state:*\",      year = 2019) head(sahie_states) ##   state    NAME IPRCAT                IPR_DESC PCTUI_PT YEAR ## 1    01 Alabama      0             All Incomes     11.6 2019 ## 2    01 Alabama      1      <= 200% of Poverty     18.9 2019 ## 3    01 Alabama      2      <= 250% of Poverty     18.0 2019 ## 4    01 Alabama      3      <= 138% of Poverty     19.9 2019 ## 5    01 Alabama      4      <= 400% of Poverty     15.1 2019 ## 6    01 Alabama      5 138% to 400% of Poverty     12.5 2019 sahie_counties <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),      region = \"county:*\",      regionin = \"state:01,02\",      year = 2019) head(sahie_counties, n=12L) ##    state county               NAME IPRCAT                IPR_DESC PCTUI_PT YEAR ## 1     01    001 Autauga County, AL      0             All Incomes      9.4 2019 ## 2     01    001 Autauga County, AL      1      <= 200% of Poverty     17.3 2019 ## 3     01    001 Autauga County, AL      2      <= 250% of Poverty     16.3 2019 ## 4     01    001 Autauga County, AL      3      <= 138% of Poverty     18.5 2019 ## 5     01    001 Autauga County, AL      4      <= 400% of Poverty     12.8 2019 ## 6     01    001 Autauga County, AL      5 138% to 400% of Poverty     10.2 2019 ## 7     01    003 Baldwin County, AL      0             All Incomes     10.9 2019 ## 8     01    003 Baldwin County, AL      1      <= 200% of Poverty     20.1 2019 ## 9     01    003 Baldwin County, AL      2      <= 250% of Poverty     18.7 2019 ## 10    01    003 Baldwin County, AL      3      <= 138% of Poverty     21.0 2019 ## 11    01    003 Baldwin County, AL      4      <= 400% of Poverty     15.2 2019 ## 12    01    003 Baldwin County, AL      5 138% to 400% of Poverty     12.9 2019 sahie_years <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\"),      region = \"state:01,17\",      year = \"2006:2019\") library(ggplot2) ggplot(sahie_years, aes(x = YEAR, y = PCTUI_PT, group = state, color = state)) +     geom_line() +     scale_y_continuous(         breaks = seq(6, 18, 2),         limits = c(6, 18),         expand = c(0, 0)) +     theme(         legend.position = \"top\",         panel.grid.minor = element_blank(),         panel.grid.major.x = element_blank(),         panel.border = element_blank(),         axis.title = element_blank()) +     scale_color_discrete(         labels = c(\"Alabama\", \"Illinois\"),          breaks = c(\"01\", \"17\")) +     labs(         title = \"Percent of people who are uninsured by state\",         subtitle = \"For people below age 65\",         caption = \"Source: Small Area Health Insurance Estimates\"     )"},{"path":"/articles/getting-started.html","id":"annotations","dir":"Articles","previous_headings":"Using getCensus","what":"Annotations","title":"Getting started with censusapi","text":"Census datasets, inclduing American Community Survey, use annotated values. values use numbers symbols indicate data unavailable, topcoded, insufficient sample size, noteworthy characteristics. Read Census Bureau ACS annotation meanings ACS variable types. censusapi package intended return data -can receive unaltered annotations. using data small geography make sure check values like -666666666 check annotation columns non-empty values exclude needed. example, ’ll get median income associated annotations margin error, three census tracts Washington, DC — one available, one topcoded, one unavailable. Notice income topcoded $250,000 — meaning tract’s income threshold listed $250,000. available listed -666666666. can see annotations “EA” (estimate annotation) “MA” (margin error annotation) columns.","code":"acs_income <- getCensus(     name = \"acs/acs5\",     vintage = 2020,      vars = c(\"B19013_001E\", \"B19013_001EA\", \"B19013_001M\", \"B19013_001MA\"),      region = \"tract:006804,007703,000903\",     regionin = \"county:001&state:11\") acs_income ##   state county  tract B19013_001E B19013_001EA B19013_001M B19013_001MA ## 1    11    001 007703       46156         <NA>       24087         <NA> ## 2    11    001 000903      250001     250,000+  -333333333          *** ## 3    11    001 006804  -666666666            -  -222222222           **"},{"path":"/articles/getting-started.html","id":"variable-groups","dir":"Articles","previous_headings":"Using getCensus","what":"Variable groups","title":"Getting started with censusapi","text":"surveys, particularly American Community Survey Decennial Census, can get many related variables using group, defined Census Bureau. data tools, like American FactFinder, idea referred table. American Community Survey (ACS) APIs include estimates (variable names ending “E”), annotations, margins error, statistical significance, depending data set. Read ACS variable types annotation symbol meanings Census website. can retrieve annotation variables manually, specifying list variables. ’ll get estimate, margin error annotations median household income past 12 months Census tracts Alaska. can also retrieve also estimates annotations group variables one command. ’s group call table, B19013.","code":"acs_income <- getCensus(     name = \"acs/acs5\",     vintage = 2017,      vars = c(\"NAME\", \"B19013_001E\", \"B19013_001EA\", \"B19013_001M\", \"B19013_001MA\"),      region = \"tract:*\",      regionin = \"state:02\") head(acs_income) ##   state county  tract                                               NAME ## 1    02    068 000100             Census Tract 1, Denali Borough, Alaska ## 2    02    261 000200 Census Tract 2, Valdez-Cordova Census Area, Alaska ## 3    02    261 000300 Census Tract 3, Valdez-Cordova Census Area, Alaska ## 4    02    261 000100 Census Tract 1, Valdez-Cordova Census Area, Alaska ## 5    02    122 000200    Census Tract 2, Kenai Peninsula Borough, Alaska ## 6    02    122 000800    Census Tract 8, Kenai Peninsula Borough, Alaska ##   B19013_001E B19013_001EA B19013_001M B19013_001MA ## 1       83295         <NA>        6362         <NA> ## 2       95227         <NA>       22638         <NA> ## 3       89000         <NA>       20435         <NA> ## 4       49076         <NA>        7165         <NA> ## 5       57694         <NA>        6526         <NA> ## 6       50904         <NA>        3723         <NA> # See descriptions of the variables in group B19013 group_B19013 <- listCensusMetadata(     name = \"acs/acs5\",     vintage = 2017,     type = \"variables\",     group = \"B19013\") group_B19013 ##           name ## 1 B19013_001MA ## 2 B19013_001EA ## 3  B19013_001E ## 4  B19013_001M ##                                                                                                               label ## 1 Annotation of Margin of Error!!Median household income in the past 12 months (in 2017 inflation-adjusted dollars) ## 2        Annotation of Estimate!!Median household income in the past 12 months (in 2017 inflation-adjusted dollars) ## 3                      Estimate!!Median household income in the past 12 months (in 2017 inflation-adjusted dollars) ## 4               Margin of Error!!Median household income in the past 12 months (in 2017 inflation-adjusted dollars) ##                                                                              concept ## 1 MEDIAN HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2017 INFLATION-ADJUSTED DOLLARS) ## 2 MEDIAN HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2017 INFLATION-ADJUSTED DOLLARS) ## 3 MEDIAN HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2017 INFLATION-ADJUSTED DOLLARS) ## 4 MEDIAN HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2017 INFLATION-ADJUSTED DOLLARS) ##   predicateType  group limit predicateOnly ## 1        string B19013     0          TRUE ## 2        string B19013     0          TRUE ## 3           int B19013     0          TRUE ## 4           int B19013     0          TRUE acs_income_group <- getCensus(     name = \"acs/acs5\",      vintage = 2017,      vars = c(\"NAME\", \"group(B19013)\"),      region = \"tract:*\",      regionin = \"state:02\") head(acs_income_group) ##   state county  tract                                               NAME ## 1    02    068 000100             Census Tract 1, Denali Borough, Alaska ## 2    02    261 000200 Census Tract 2, Valdez-Cordova Census Area, Alaska ## 3    02    261 000300 Census Tract 3, Valdez-Cordova Census Area, Alaska ## 4    02    261 000100 Census Tract 1, Valdez-Cordova Census Area, Alaska ## 5    02    122 000200    Census Tract 2, Kenai Peninsula Borough, Alaska ## 6    02    122 000800    Census Tract 8, Kenai Peninsula Borough, Alaska ##   B19013_001E B19013_001EA B19013_001M B19013_001MA               GEO_ID NAME_1 ## 1       83295         <NA>        6362         <NA> 1400000US02068000100     NA ## 2       95227         <NA>       22638         <NA> 1400000US02261000200     NA ## 3       89000         <NA>       20435         <NA> 1400000US02261000300     NA ## 4       49076         <NA>        7165         <NA> 1400000US02261000100     NA ## 5       57694         <NA>        6526         <NA> 1400000US02122000200     NA ## 6       50904         <NA>        3723         <NA> 1400000US02122000800     NA"},{"path":"/articles/getting-started.html","id":"advanced-geographies","dir":"Articles","previous_headings":"Using getCensus","what":"Advanced geographies","title":"Getting started with censusapi","text":"geographies, particularly Census tracts blocks, need specified within larger geographies like states counties. varies API endpoint, make sure read documentation specific API run listCensusMetadata see available geographies. may want get get data many geographies require parent geography. example, tract-level data 2010 Decennial Census can requested one state time. example, use built fips list state FIPS codes request tract-level data state join single data frame. regionin argument getCensus can also used string nested geographies, shown . 2010 Decennial Census summary file 1 requires specify state county retrieve block-level data. Use region request block level data, regionin specify desired state county. many examples advanced topics check articles","code":"tracts <- NULL for (f in fips) {     stateget <- paste(\"state:\", f, sep=\"\")     temp <- getCensus(         name = \"dec/sf1\",         vintage = 2010,         vars = \"P001001\",         region = \"tract:*\",         regionin = stateget)     tracts <- rbind(tracts, temp) } head(tracts) ##   state county  tract P001001 ## 1    01    001 020100    1912 ## 2    01    001 020500   10766 ## 3    01    001 020300    3373 ## 4    01    001 020400    4386 ## 5    01    001 020200    2170 ## 6    01    001 020600    3668 data2010 <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = \"P001001\",      region = \"block:*\",     regionin = \"state:36+county:027+tract:010000\") head(data2010) ##   state county  tract block P001001 ## 1    36    027 010000  1000      31 ## 2    36    027 010000  1011      17 ## 3    36    027 010000  1028      41 ## 4    36    027 010000  1001       0 ## 5    36    027 010000  1031       0 ## 6    36    027 010000  1002       4"},{"path":"/articles/getting-started.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"Getting started with censusapi","text":"APIs contain hundreds API endpoints dozens datasets, work little differently. Census Bureau also makes frequent updates, unfortunately always announced advance. ’re getting error message unexpected results, things check.","code":""},{"path":"/articles/getting-started.html","id":"variables","dir":"Articles","previous_headings":"Troubleshooting","what":"Variables","title":"Getting started with censusapi","text":"Use listCensusMetadata(type = \"variables\") API see table available variables. Occasionally variable names change data updates API updates. names may different year year. Capitalization may also inconsistent datasets years. Census APIs case-sensitive, means variable name want uppercase ’ll need write uppercase request. APIs use uppercase variable names, use lowercase even use sentence case.","code":""},{"path":"/articles/getting-started.html","id":"geographies","dir":"Articles","previous_headings":"Troubleshooting","what":"Geographies","title":"Getting started with censusapi","text":"Use listCensusMetadata(type = \"geographies\") dataset check geographies can use. API list valid geographies occasionally change Census Bureau makes updates. previously available geography isn’t available anymore, email cnmp.developers.list@census.gov detailing issue. ’re specifying region FIPS code, example state:01, make sure use full code, padded 0s necessary. APIs always enforce (previously, state:1 usually worked), now . See Census reference files valid FIPS codes.","code":""},{"path":"/articles/getting-started.html","id":"unexpected-errors","dir":"Articles","previous_headings":"Troubleshooting","what":"Unexpected errors","title":"Getting started with censusapi","text":"Occasionally might get general error message \"error running query.  logged error correct ASAP.  Sorry inconvenience.\" comes Census Bureau caused number problems, including server issues. Try rerunning API call. doesn’t work requesting large amount data, try reducing amount ’re requesting, example getting one state time. ’re still trouble, email census.data@census.gov. Include email raw API call ’s provided getCensus error message (R code) can try help.","code":""},{"path":"/articles/getting-started.html","id":"other-ways-to-get-help","dir":"Articles","previous_headings":"Troubleshooting","what":"Other ways to get help","title":"Getting started with censusapi","text":"Open Github issue bugs issues R package. Join public Census Bureau Slack channel ask question R API rooms. Email Census Bureau API team census.data@census.gov questions relating underlying data APIs.","code":""},{"path":"/articles/getting-started.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"Additional resources","title":"Getting started with censusapi","text":"Census Data API User Guide","code":""},{"path":"/articles/getting-started.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Getting started with censusapi","text":"product uses Census Bureau Data API endorsed certified Census Bureau.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hannah Recht. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Recht H (2022). censusapi: Retrieve Data Census APIs. R package version 0.8.0.9000, https://github.com/hrecht/censusapi.","code":"@Manual{,   title = {censusapi: Retrieve Data from the Census APIs},   author = {Hannah Recht},   year = {2022},   note = {R package version 0.8.0.9000},   url = {https://github.com/hrecht/censusapi}, }"},{"path":"/index.html","id":"censusapi","dir":"","previous_headings":"","what":"Retrieve Data from the Census APIs","title":"Retrieve Data from the Census APIs","text":"censusapi accessor United States Census Bureau’s APIs. 300 Census API endpoints available, including Decennial Census, American Community Survey, Poverty Statistics, Population Estimates APIs. package designed let get data APIs using main function—getCensus—syntax dataset. censusapi generally uses APIs’ original parameter names users can easily transition Census’s documentation examples package. also includes metadata functions return data frames available APIs, variables, geographies.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Retrieve Data from the Census APIs","text":"Get latest stable release CRAN: can also install latest development version censusapi Github using devtools. people want : Read build censusapi call Getting started censusapi see lots examples list examples.","code":"install.packages(\"censusapi\") # install.packages(\"devtools\") devtools::install_github(\"hrecht/censusapi\")"},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Retrieve Data from the Census APIs","text":"product uses Census Bureau Data API endorsed certified Census Bureau. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/reference/fips.html","id":null,"dir":"Reference","previous_headings":"","what":"List of state fips codes - 50 states plus DC — fips","title":"List of state fips codes - 50 states plus DC — fips","text":"small geographies Census APIs can used state hierarchy. list fips codes may looped retrieve data states.","code":""},{"path":"/reference/fips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of state fips codes - 50 states plus DC — fips","text":"","code":"fips"},{"path":"/reference/fips.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of state fips codes - 50 states plus DC — fips","text":"list fips codes 50 states District Columbia","code":""},{"path":"/reference/fips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of state fips codes - 50 states plus DC — fips","text":"","code":"fips #>  [1] \"01\" \"02\" \"04\" \"05\" \"06\" \"08\" \"09\" \"10\" \"11\" \"12\" \"13\" \"15\" \"16\" \"17\" \"18\" #> [16] \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" #> [31] \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" #> [46] \"50\" \"51\" \"53\" \"54\" \"55\" \"56\""},{"path":"/reference/getCensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Census data from a given API — getCensus","title":"Retrieve Census data from a given API — getCensus","text":"Retrieve Census data given API","code":""},{"path":"/reference/getCensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Census data from a given API — getCensus","text":"","code":"getCensus(   name,   vintage = NULL,   key = Sys.getenv(\"CENSUS_KEY\"),   vars,   region = NULL,   regionin = NULL,   time = NULL,   year = NULL,   date = NULL,   period = NULL,   monthly = NULL,   show_call = FALSE,   category_code = NULL,   data_type_code = NULL,   naics = NULL,   pscode = NULL,   naics2012 = NULL,   naics2007 = NULL,   naics2002 = NULL,   naics1997 = NULL,   sic = NULL,   ... )"},{"path":"/reference/getCensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Census data from a given API — getCensus","text":"name API name - e.g. acs5. See list https://api.census.gov/data.html vintage Year dataset, e.g. 2014 - required timeseries APIs key Census API key, gotten https://api.census.gov/data/key_signup.html vars List variables get region Geography get regionin Optional hierarchical geography limit region time, year, date, period, monthly Optional arguments used time series APIs show_call List underlying API call sent Census Bureau info category_code, data_type_code Arguments used Economic Indicators Time Series API naics, pscode Arguments used Annual Survey Manufactures API naics2012, naics2007, naics2002, naics1997, sic Arguments used Economy Wide Key Statistics APIs Business Patterns APIs ... valid parameters pass Census API. Note: APIs case sensitive.","code":""},{"path":"/reference/getCensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Census data from a given API — getCensus","text":"","code":"df <- getCensus(name = \"acs/acs5\", vintage = 2017, vars = c(\"B01001_001E\", \"NAME\", \"B01002_001E\", \"B19013_001E\"), region = \"tract:*\", regionin = \"state:06\") head(df) #>   state county  tract B01001_001E #> 1    06    037 503502        4359 #> 2    06    037 504102           7 #> 3    06    037 265700        5181 #> 4    06    037 267300        4751 #> 5    06    037 267502        3524 #> 6    06    037 267700        3141 #>                                                   NAME  B01002_001E B19013_001E #> 1 Census Tract 5035.02, Los Angeles County, California         35.8       73979 #> 2 Census Tract 5041.02, Los Angeles County, California -666666666.0  -666666666 #> 3    Census Tract 2657, Los Angeles County, California         47.5       84327 #> 4    Census Tract 2673, Los Angeles County, California         34.6       61290 #> 5 Census Tract 2675.02, Los Angeles County, California         30.8       80313 #> 6    Census Tract 2677, Los Angeles County, California         35.0       84608  # Use American Community Survey variable groups to get all data from a given table. # This returns estimates as well as margins of error and annotation flags. acs_group <- getCensus(name = \"acs/acs5\", vintage = 2017, vars = c(\"NAME\", \"group(B19013)\"), region = \"county:*\") #> Warning: NAs introduced by coercion head(acs_group) #>   state county                          NAME B19013_001E B19013_001EA #> 1    30    019       Daniels County, Montana       53591         <NA> #> 2    72    073 Jayuya Municipio, Puerto Rico       15615         <NA> #> 3    24    023      Garrett County, Maryland       48174         <NA> #> 4    30    079       Prairie County, Montana       50850         <NA> #> 5    39    173             Wood County, Ohio       58033         <NA> #> 6    08    011         Bent County, Colorado       32500         <NA> #>   B19013_001M B19013_001MA         GEO_ID NAME_1 #> 1        3318         <NA> 0500000US30019     NA #> 2        3424         <NA> 0500000US72073     NA #> 3        2234         <NA> 0500000US24023     NA #> 4        6481         <NA> 0500000US30079     NA #> 5        1604         <NA> 0500000US39173     NA #> 6        3442         <NA> 0500000US08011     NA  # Retreive block-level data within a specific tract using a nested regionin argument data2010 <- getCensus(name = \"dec/sf1\", vintage = 2010, vars = c(\"NAME\",\"P001001\"), region = \"block:*\", regionin = \"state:36+county:027+tract:010000\") head(data2010) #>   state county  tract block #> 1    36    027 010000  1000 #> 2    36    027 010000  1011 #> 3    36    027 010000  1028 #> 4    36    027 010000  1001 #> 5    36    027 010000  1031 #> 6    36    027 010000  1002 #>                                                                     NAME #> 1 Block 1000, Block Group 1, Census Tract 100, Dutchess County, New York #> 2 Block 1011, Block Group 1, Census Tract 100, Dutchess County, New York #> 3 Block 1028, Block Group 1, Census Tract 100, Dutchess County, New York #> 4 Block 1001, Block Group 1, Census Tract 100, Dutchess County, New York #> 5 Block 1031, Block Group 1, Census Tract 100, Dutchess County, New York #> 6 Block 1002, Block Group 1, Census Tract 100, Dutchess County, New York #>   P001001 #> 1      31 #> 2      17 #> 3      41 #> 4       0 #> 5       0 #> 6       4  # Get poverty rates for children and all ages over time saipe <- getCensus(name = \"timeseries/poverty/saipe\", vars = c(\"NAME\", \"SAEPOVRT0_17_PT\", \"SAEPOVRTALL_PT\"), region = \"state:01\", year = \"2000:2019\") head(saipe) #>   state    NAME SAEPOVRT0_17_PT SAEPOVRTALL_PT YEAR #> 1    01 Alabama            20.5           14.6 2000 #> 2    01 Alabama            22.1           15.7 2001 #> 3    01 Alabama            21.6           15.4 2002 #> 4    01 Alabama            22.3           15.3 2003 #> 5    01 Alabama            22.6           16.1 2004 #> 6    01 Alabama            24.3           16.9 2005  # Get county business patterns data for a specific NAICS sector cbp_2016 <- getCensus(name = \"cbp\", vintage = \"2016\", vars = c(\"EMP\", \"ESTAB\", \"NAICS2012_TTL\", \"GEO_TTL\"), region = \"state:*\", naics2012 = \"23\") head(cbp_2016) #>   state    EMP ESTAB NAICS2012_TTL     GEO_TTL NAICS2012 #> 1    27 118033 16360  Construction   Minnesota        23 #> 2    28  44551  3796  Construction Mississippi        23 #> 3    29 121494 13263  Construction    Missouri        23 #> 4    30  25036  5326  Construction     Montana        23 #> 5    31  45909  6357  Construction    Nebraska        23 #> 6    32  72817  4839  Construction      Nevada        23"},{"path":"/reference/getFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function: Get the API response, return a data frame — getFunction","title":"Internal function: Get the API response, return a data frame — getFunction","text":"Internal function: Get API response, return data frame","code":""},{"path":"/reference/getFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function: Get the API response, return a data frame — getFunction","text":"","code":"getFunction(   apiurl,   name,   key,   get,   region,   regionin,   time,   year,   date,   period,   monthly,   show_call,   category_code,   data_type_code,   naics,   pscode,   naics2012,   naics2007,   naics2002,   naics1997,   sic,   ... )"},{"path":"/reference/getFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function: Get the API response, return a data frame — getFunction","text":"apiurl, key, get, region, time, etc","code":""},{"path":"/reference/listCensusApis.html","id":null,"dir":"Reference","previous_headings":"","what":"Get useful dataset metadata on all available APIs as a data frame — listCensusApis","title":"Get useful dataset metadata on all available APIs as a data frame — listCensusApis","text":"Scrapes https://api.census.gov/data.json returns dataframe includes: title, description, name, vintage, url, dataset type, useful fields.","code":""},{"path":"/reference/listCensusApis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get useful dataset metadata on all available APIs as a data frame — listCensusApis","text":"","code":"listCensusApis()"},{"path":"/reference/listCensusApis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get useful dataset metadata on all available APIs as a data frame — listCensusApis","text":"","code":"apis <- listCensusApis() head(apis) #>                                         title          name vintage      type #> 1245 Current Population Survey: Basic Monthly cps/basic/apr    2022 Microdata #> 1178 Current Population Survey: Basic Monthly cps/basic/feb    2022 Microdata #> 1174 Current Population Survey: Basic Monthly cps/basic/jan    2022 Microdata #> 1248 Current Population Survey: Basic Monthly cps/basic/jun    2022 Microdata #> 1191 Current Population Survey: Basic Monthly cps/basic/mar    2022 Microdata #> 1246 Current Population Survey: Basic Monthly cps/basic/may    2022 Microdata #>             temporal                                           url #> 1245 2022-04/2022-04 http://api.census.gov/data/2022/cps/basic/apr #> 1178 2022-02/2022-02 http://api.census.gov/data/2022/cps/basic/feb #> 1174 2022-01/2022-01 http://api.census.gov/data/2022/cps/basic/jan #> 1248 2022-06/2022-06 http://api.census.gov/data/2022/cps/basic/jun #> 1191 2022-03/2022-03 http://api.census.gov/data/2022/cps/basic/mar #> 1246 2022-05/2022-05 http://api.census.gov/data/2022/cps/basic/may #>                   modified #> 1245 2022-01-19 00:00:00.0 #> 1178 2022-01-19 00:00:00.0 #> 1174 2022-01-19 00:00:00.0 #> 1248 2022-01-19 00:00:00.0 #> 1191 2022-01-19 00:00:00.0 #> 1246 2022-01-19 00:00:00.0 #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             description #> 1245 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 1178 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 1174 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 1248 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 1191 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 1246 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #>                        contact #> 1245 mailto:dsd.cps@census.gov #> 1178 mailto:dsd.cps@census.gov #> 1174 mailto:dsd.cps@census.gov #> 1248 mailto:dsd.cps@census.gov #> 1191 mailto:dsd.cps@census.gov #> 1246 mailto:dsd.cps@census.gov"},{"path":"/reference/listCensusMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get variable or geography metadata for a given API as a data frame — listCensusMetadata","title":"Get variable or geography metadata for a given API as a data frame — listCensusMetadata","text":"Get variable geography metadata given API data frame","code":""},{"path":"/reference/listCensusMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get variable or geography metadata for a given API as a data frame — listCensusMetadata","text":"","code":"listCensusMetadata(name, vintage = NULL, type = \"variables\", group = NULL)"},{"path":"/reference/listCensusMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get variable or geography metadata for a given API as a data frame — listCensusMetadata","text":"name API name - e.g. acs5. See list https://api.census.gov/data.html vintage Vintage dataset, e.g. 2014 - required timeseries APIs type Type metadata return, either \"variables\", \"geographies\" \"geography\", \"groups\". Default variables. group optional variable group code, used return metadata specific group variables .","code":""},{"path":"/reference/makeVarlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Use variable metadata to find variables containing a given string. — makeVarlist","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"Return list variable names data frame variable metadata containing given string. can used create list variables later pass getCensus, data frame documenting variables used given project.","code":""},{"path":"/reference/makeVarlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"","code":"makeVarlist(name, vintage = NULL, find, varsearch = \"all\", output = \"list\")"},{"path":"/reference/makeVarlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"name API name - e.g. acs5. See list https://api.census.gov/data.html vintage Year dataset, e.g. 2014 - required timeseries APIs find string find variable metadata varsearch Optional argument specifying fields search. Default \"\". Options \"\", \"name\", \"label\", \"concept\". output Optional argument, specifying output \"list\" \"dataframe\". Default \"list\".","code":""},{"path":"/reference/makeVarlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"","code":"# Return a list, and then use getCensus function to retrieve those variables myvars <- makeVarlist(name = \"timeseries/poverty/saipe\",   find = \"Ages 0-4\",   varsearch = \"label\") myvars #> [1] \"SAEPOVRT0_4_MOE\"  \"SAEPOVRT0_4_UB90\" \"SAEPOVRT0_4_LB90\" \"SAEPOVRT0_4_PT\"   #> [5] \"SAEPOV0_4_PT\"     \"SAEPOVU_0_4\"      \"SAEPOV0_4_MOE\"    \"SAEPOV0_4_UB90\"   #> [9] \"SAEPOV0_4_LB90\"   saipe_dt <- getCensus(name = \"timeseries/poverty/saipe\",   time = 2016,   vars = myvars,   region = \"state:*\") head(saipe_dt) #>   time state SAEPOVRT0_4_MOE SAEPOVRT0_4_UB90 SAEPOVRT0_4_LB90 SAEPOVRT0_4_PT #> 1 2016    01             1.5             28.9             25.9           27.4 #> 2 2016    02             1.9             17.0             13.2           15.1 #> 3 2016    04             1.2             26.1             23.7           24.9 #> 4 2016    05             1.8             29.1             25.5           27.3 #> 5 2016    06             0.5             21.2             20.2           20.7 #> 6 2016    08             1.2             15.1             12.7           13.9 #>   SAEPOV0_4_PT SAEPOVU_0_4 SAEPOV0_4_MOE SAEPOV0_4_UB90 SAEPOV0_4_LB90 #> 1        78675      287177          4418          83093          74257 #> 2         7919       52408          1021           8940           6898 #> 3       106817      428317          5131         111948         101686 #> 4        50341      184115          3246          53587          47095 #> 5       502432     2430975         13017         515449         489415 #> 6        46111      330815          3894          50005          42217"},{"path":"/news/index.html","id":"censusapi-080","dir":"Changelog","previous_headings":"","what":"censusapi 0.8.0","title":"censusapi 0.8.0","text":"API metadata gathered listCensusMetadata() now new columns: dataset contact dataset type: either Aggregate, Timeseries, Microdata. Documentation examples updated, including new vignettes microdata access advanced censusapi usage.","code":""},{"path":"/news/index.html","id":"censusapi-073","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.3","title":"censusapi 0.7.3","text":"Properly types certain variables international trade timeseries APIs.","code":""},{"path":"/news/index.html","id":"censusapi-072","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.2","title":"censusapi 0.7.2","text":"Adds named parameter YEAR getCensus() per changes timeseries endpoints previously used TIME parameter. Updates examples using SAHIE SAIPE APIs per Census Bureau changes endpoints.","code":""},{"path":"/news/index.html","id":"censusapi-071","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.1","title":"censusapi 0.7.1","text":"CRAN release: 2020-10-14 Removes listCensusMetadata() masterlist examples used Business Dynamic Statistics endpoints, recently deprecated.","code":""},{"path":"/news/index.html","id":"censusapi-070","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.0","title":"censusapi 0.7.0","text":"CRAN release: 2020-09-07 Adds show_call option getCensus(), shows underlying API call (otherwise shown errors) link package documentation used. Converts improperly formatted string “N/” “NULL” values underlying Census data true NA values. Keeps 2017 NAICS variables characters, instead erroneously converting numeric. Parses endpoint numeric variables -character variable names numeric several popular endpoints: SAHIE, SAIPE, ZBP, CBP, PEP Decennial Response Rates. Removes examples deprecated 1990 2000 Decennial endpoints.","code":""},{"path":"/news/index.html","id":"censusapi-061","dir":"Changelog","previous_headings":"","what":"censusapi 0.6.1","title":"censusapi 0.6.1","text":"Updates web link FIPS codes reference Census website reorganization. Adds examples Decennial Census response rates, updates several examples retrieve newer data. Removes example masterlist package due size, online .","code":""},{"path":"/news/index.html","id":"censusapi-060","dir":"Changelog","previous_headings":"","what":"censusapi 0.6.0","title":"censusapi 0.6.0","text":"CRAN release: 2019-04-13 Allows use miscellaneous paramaters getCensus(). allows users specify valid API argument name pass value, giving full access underlying Census Bureau APIs. Adds group parameter listCensusMetadata(). allows users get variable metadata specified variable group. Improves internal logic listCensusMetadata(). Add documentation examples using miscellaneous paramaters. Returns underlying API call error messages, particularly useful users needing Census Bureau. Specifies tract block group example due underlying API changes. Adds Contributor Code Conduct.","code":""},{"path":"/news/index.html","id":"censusapi-050","dir":"Changelog","previous_headings":"","what":"censusapi 0.5.0","title":"censusapi 0.5.0","text":"Makes region optional argument getCensus, rather required. Pads fips codes stored fips dataset zeroes.","code":""},{"path":"/news/index.html","id":"censusapi-041","dir":"Changelog","previous_headings":"","what":"censusapi 0.4.1","title":"censusapi 0.4.1","text":"CRAN release: 2018-08-19 Adds groups type option listCensusMetadata. Fixes bug listCensusMetadata variables call caused underlying Census API change, renamed validValues values endpoints. Converts variable metadata columns factors characters. Applies numeric conversion exclusions API endpoints. Improves language surrounding error messages Census Bureau returns. Updates 2010 Decennial Census examples use new 2010 dec/sf1 endpoint, replace 2010 sf1 endpoint August 30, 2018.","code":""},{"path":"/news/index.html","id":"censusapi-040","dir":"Changelog","previous_headings":"","what":"censusapi 0.4.0","title":"censusapi 0.4.0","text":"Adds support NAICS code arguments used Business Patterns APIs, Economic Census APIs, Annual Survey Manufactures APIs.","code":""},{"path":"/news/index.html","id":"censusapi-030","dir":"Changelog","previous_headings":"","what":"censusapi 0.3.0","title":"censusapi 0.3.0","text":"CRAN release: 2018-05-02 convert ACS annotation flag variables numeric columns. Puts lowercase variable name columns first (geographies), rather non-numeric columns. Changes punctuation returned column names underscores, removing repeated underscores trailing punctuation. Uses consistent spacing examples. Updates examples using ACS data latest year using new acs/acs5 endpoint adds variable group examples.","code":""},{"path":"/news/index.html","id":"censusapi-021","dir":"Changelog","previous_headings":"","what":"censusapi 0.2.1","title":"censusapi 0.2.1","text":"CRAN release: 2017-08-01 Fixes bug listCensusMetadata variables call caused underlying Census API changes.","code":""},{"path":"/news/index.html","id":"censusapi-020","dir":"Changelog","previous_headings":"","what":"censusapi 0.2.0","title":"censusapi 0.2.0","text":"CRAN release: 2017-06-06 Updated examples, documentation, vignette.","code":""},{"path":"/news/index.html","id":"censusapi-012","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.2","title":"censusapi 0.1.2","text":"Fixes bug caused single-row responses throw error","code":""},{"path":"/news/index.html","id":"censusapi-011","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.1","title":"censusapi 0.1.1","text":"Uses https rather http requests. Census Bureau announced APIs https-beginning August 28, 2017. Note: change generally increased run time retrieving variable metadata listCensusMetadata. APIs, function run one second. lag may noticeable American Community Survey APIs, 40,000 variables. Improvements planned future releases. listCensusMetadata allows full word single letter argument type parameter","code":""},{"path":"/news/index.html","id":"censusapi-0109001","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.0.9001","title":"censusapi 0.1.0.9001","text":"Scrapes http://api.census.gov/data.json rather .html listCensusApis, starts removing XML dependency. .json data also includes several fields present .html file, useful added returned data frame. Changes dataset used listCensusMetadata examples, mainly build/checks speed.","code":""},{"path":"/news/index.html","id":"censusapi-0109000","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.0.9000","title":"censusapi 0.1.0.9000","text":"Set getCensus(key) argument’s default value CENSUS_KEY .Renviron. Explicitly encourages Census key added .Renviron. (Users can always override given input.) Parses HTML response code. particularly important response Census APIs provided invalid keys.","code":""},{"path":"/news/index.html","id":"censusapi-010","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.0","title":"censusapi 0.1.0","text":"Removes fips code 72 (Puerto Rico) included fips dataset Puerto Rico included Census API datasets. Changes census key references examples Sys.getenv(“CENSUS_KEY”).","code":""}]
