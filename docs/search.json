[{"path":"https://www.hrecht.com/censusapi/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, interest fostering open welcoming community, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality. Examples unacceptable behavior participants include: use sexualized language imagery Personal attacks Trolling insulting/derogatory comments Public private harassment Publishing ’s private information, physical electronic addresses, without explicit permission unethical unprofessional conduct Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. adopting Code Conduct, project maintainers commit fairly consistently applying principles every aspect managing project. Project maintainers follow enforce Code Conduct may permanently removed project team. code conduct applies within project spaces public spaces individual representing project community. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.2.0, available https://www.contributor-covenant.org/version/1/2/0/code--conduct.html","code":""},{"path":"https://www.hrecht.com/censusapi/articles/accessing-microdata.html","id":"about-microdata","dir":"Articles","previous_headings":"","what":"About microdata","title":"Accessing microdata","text":"Microdata contains individual-level responses: one row per person. vital tool perform custom analysis, great power comes great responsibility. Appropriately weighting individual-level responses required. ’ll often need work household relationships need handle responses aren’t universe question (example, removing children analysis college graduation rate.) ’re new working microdata ’ll need reading diving . resources Census Bureau: microdata use ? (video transcript) Census Microdata API User Guide (pdf) Microdata API documentation endpoints, censusapi retrieves data can perform analysis using methodology choice. ’re looking interactive microdata analysis tool, try data.census.gov microdata interactive tool IPUMS online data analysis tool. ’ve learned use microdata gained understanding weighting, getting data using censusapi simple.","code":""},{"path":"https://www.hrecht.com/censusapi/articles/accessing-microdata.html","id":"getting-microdata-with-censusapi","dir":"Articles","previous_headings":"","what":"Getting microdata with censusapi","title":"Accessing microdata","text":"example, ’ll get data 2020 Current Population Survey Voting Supplement. survey asks people voted, , , includes useful demographic data. See available variables: CPS Voting supplement, get data method voting New York state using PES5 (Vote person mail?) PESEX (gender), along appropriate weighting variable, PWSSWGT. ’ll get data people response 1 (yes) PES1 (vote?).","code":"voting_vars <- listCensusMetadata(     name = \"cps/voting/nov\",     vintage = 2020,     type = \"variables\") head(voting_vars) cps_voting <- getCensus(     name = \"cps/voting/nov\",     vintage = 2020,     vars = c(\"PES5\", \"PESEX\", \"PWSSWGT\"),     region = \"state:36\",     PES1 = 1) head(cps_voting)"},{"path":"https://www.hrecht.com/censusapi/articles/accessing-microdata.html","id":"making-a-data-dictionary","dir":"Articles","previous_headings":"","what":"Making a data dictionary","title":"Accessing microdata","text":"microdata variables encoded, means data lot numbers instead text labels. data dictionary, includes definitions labels every variable dataset, helpful. possible listCensusMetasdata(include_values = \"TRUE) returns data dictionary one row variable-label pair. means 30 codes given variable, 30 rows data dictionary. Variables don’t value labels metadata one row. can also look meaning codes single variable using function, listCensusMetadata(). values PES5, variable “Vote person mail?”","code":"voting_dict <- listCensusMetadata(     name = \"cps/voting/nov\",     vintage = 2020,     type = \"variables\",     include_values = TRUE) head(voting_dict) PES5_values <- listCensusMetadata(     name = \"cps/voting/nov\",     vintage = 2020,     type = \"values\",     variable = \"PES5\") PES5_values"},{"path":"https://www.hrecht.com/censusapi/articles/accessing-microdata.html","id":"what-to-do-with-microdata","dir":"Articles","previous_headings":"","what":"What to do with microdata","title":"Accessing microdata","text":"microdata, look voting patterns gender demographic, geographic, economic variables available voting supplement. ways access Census microdata : Retrieve standardized, cleaned microdata data IPUMS import impumsr package. files generally released months year raw Census microdata available . IPUMS widely used research data needed brand new. highly recommend check IPUMS’ cleaned files slightly older microdata, well historic geographic data. Download bulk files Census FTPs (file transfer protocols.) Retrieve American Community Survey microdata via Census APIs tidycensus, helpful functions working endpoints.","code":""},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"american-community-survey","dir":"Articles","previous_headings":"","what":"American Community Survey","title":"Even more censusapi examples","text":"multiple useful ACS datasets slightly different purposes. ’s Census Bureau describes : “Detailed Tables contain detailed cross-tabulations, many published block groups. data population counts. 20,000 variables dataset. Subject Tables provide overview estimates available particular topic. data presented population counts percentages. 18,000 variables dataset. Data Profiles contain broad social, economic, housing, demographic information. data presented population counts percentages. 1,000 variables dataset. Comparison Profiles similar Data Profiles also include comparisons past-year data. current year data compared prior 5-Year data include statistical significance testing. 1,000 variables dataset.”","code":""},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"acs-detailed-tables","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Detailed Tables","title":"Even more censusapi examples","text":"Get total population median income places (towns, cities, etc) Indiana.","code":"acs_income <- getCensus(     name = \"acs/acs5\",     vintage = 2020,      vars = c(\"NAME\", \"B01001_001E\", \"B19013_001E\"),      region = \"place:*\",     regionin = \"state:18\") head(acs_income)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"acs-subject-tables","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Subject Tables","title":"Even more censusapi examples","text":"Get percent people without internet subscription income five counties New York City, associated margins error: overall: S2801_C02_019E income less $20,000: S2801_C02_023E income $20,000 $74,999: S2801_C02_027E income $75,000 greater: S2801_C02_031E","code":"acs_subject <- getCensus(     name = \"acs/acs1/subject\",     vintage = 2018,      vars = c(\"NAME\", \"S2801_C02_019E\", \"S2801_C02_019M\",                      \"S2801_C02_023E\", \"S2801_C02_023M\",                       \"S2801_C02_027E\", \"S2801_C02_027M\",                      \"S2801_C02_031E\", \"S2801_C02_031M\"),      region = \"county:005,047,061,081,085\",     regionin = \"state:36\") head(acs_subject)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"acs-comparison-profiles","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Comparison Profiles","title":"Even more censusapi examples","text":"Get annaul median household income inflation-adjusted 2019 dollars Alabama cities past five years.","code":"acs_comparison <- getCensus(     name = \"acs/acs1/cprofile\",     vintage = 2019,      vars = c(\"NAME\", \"CP03_2015_062E\", \"CP03_2016_062E\", \"CP03_2017_062E\", \"CP03_2018_062E\"),      region = \"place:*\",     regionin = \"state:01\") head(acs_comparison)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"acs-migration-flows","dir":"Articles","previous_headings":"American Community Survey","what":"ACS Migration Flows","title":"Even more censusapi examples","text":"American Community Survey Migration Flows documentation Get number people moved Los Angeles county origin destination.","code":"flows <- getCensus(     name = \"acs/flows\",     vintage = 2019,     vars = c(\"MOVEDIN\", \"MOVEDOUT\", \"GEOID2\", \"FULL1_NAME\", \"FULL2_NAME\"),     region = \"county:037\",     regionin = \"state:06\") head(flows, n = 15L)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"american-community-survey-language-statistics","dir":"Articles","previous_headings":"American Community Survey","what":"American Community Survey Language Statistics","title":"Even more censusapi examples","text":"American Community Survey Language Statistics documentation Get number people New York state speak language.","code":"languages <- getCensus(     name = \"language\",     vintage = 2013,     vars = c(\"EST\", \"LAN\", \"LANLABEL\"),     region = \"state:36\") head(languages)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"annual-survey-of-entrepreneurs","dir":"Articles","previous_headings":"","what":"Annual Survey of Entrepreneurs","title":"Even more censusapi examples","text":"Annual Survey Entrepreneurs documentation","code":"ase_csa <- getCensus(     name = \"ase/csa\",     vintage = 2014,     vars = c(\"GEO_TTL\", \"NAICS2012\", \"NAICS2012_TTL\", \"EMPSZFI\", \"EMPSZFI_TTL\", \"FIRMPDEMP\"),     region = \"us:*\") head(ase_csa) ase_cscb <- getCensus(     name = \"ase/cscb\",     vintage = 2014,     vars = c(\"GEO_TTL\", \"NAICS2012_TTL\", \"ASECB\", \"ASECB_TTL\", \"SPOUSES\", \"SPOUSES_TTL\", \"YEAR\",                       \"FIRMPDEMP\", \"FIRMPDEMP_PCT\", \"RCPPDEMP\", \"RCPPDEMP_F\", \"RCPPDEMP_PCT\",                       \"EMP\", \"EMP_PCT\", \"PAYANN\", \"PAYANN_PCT\", \"FIRMPDEMP_S\", \"FIRMPDEMP_PCT_S\",                       \"RCPPDEMP_S\", \"RCPPDEMP_PCT_S\", \"EMP_S\", \"EMP_PCT_S\", \"PAYANN_S\", \"PAYANN_PCT_S\"),     region = \"us:*\") head(ase_cscb) ase_cscbo <- getCensus(     name = \"ase/cscbo\",     vintage = 2014,     vars = c(\"GEO_TTL\", \"NAICS2012_TTL\", \"ASECBO\", \"ASECBO_TTL\", \"ACQBUS\", \"ACQBUS_TTL\",                       \"YEAR\", \"OWNPDEMP\", \"OWNPDEMP_PCT\", \"OWNPDEMP_S\", \"OWNPDEMP_PCT_S\"),     region = \"us:*\") head(ase_cscbo)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"annual-survey-of-manufactures","dir":"Articles","previous_headings":"","what":"Annual Survey of Manufactures","title":"Even more censusapi examples","text":"Annual Survey Manufactures documentation","code":"asm_state <- getCensus(     name = \"timeseries/asm/state\",     vars = c(\"GEO_TTL\", \"NAICS_TTL\", \"EMP\"),     region = \"state:*\",     time = 2016,     naics = \"31-33\") head(asm_state) asm_product <- getCensus(     name = \"timeseries/asm/product\",     vars = c(\"PSCODE_TTL\", \"GEO_TTL\", \"PRODVAL\"),     region = \"us:*\",     time = 2016,     pscode = 311111) head(asm_product)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"county-business-patterns-and-nonemployer-statistics","dir":"Articles","previous_headings":"","what":"County Business Patterns and Nonemployer Statistics","title":"Even more censusapi examples","text":"County Business Patterns Nonemployer Statistics documentation","code":""},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"county-business-patterns","dir":"Articles","previous_headings":"County Business Patterns and Nonemployer Statistics","what":"County Business Patterns","title":"Even more censusapi examples","text":"County Business Patterns documentation Get employment data construction industry. Get number companies employees organizations 1,000 employees (EMPSZES = 260).","code":"cbp <- getCensus(     name = \"cbp\",     vintage = 2020,     vars = c(\"EMP\", \"ESTAB\"),     region = \"state:*\",     NAICS2017 = 23) head(cbp) cbp_large_companies <- getCensus(     name = \"cbp\",     vintage = 2020,     vars = c(\"NAME\", \"EMP\", \"ESTAB\"),     region = \"state:*\",     EMPSZES = 260) head(cbp_large_companies)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"zip-codes-business-patterns","dir":"Articles","previous_headings":"County Business Patterns and Nonemployer Statistics","what":"Zip Codes Business Patterns","title":"Even more censusapi examples","text":"Zip Codes Business Patterns documentation","code":"zbp_2018 <- getCensus(     name = \"zbp\",     vintage = 2018,     vars = c(\"EMP\", \"ESTAB\", \"EMPSZES\"),     region = \"zipcode:90210\") head(zbp_2018)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"nonemployer-statistics","dir":"Articles","previous_headings":"County Business Patterns and Nonemployer Statistics","what":"Nonemployer statistics","title":"Even more censusapi examples","text":"Nonemployer statistics documentation","code":"nonemp <- getCensus(     name = \"nonemp\",     vintage = 2016,     vars = c(\"GEO_TTL\", \"NRCPTOT\", \"NAICS2012_TTL\"),     region = \"state:*\",     naics2012 = 54) head(nonemp)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"decennial-census","dir":"Articles","previous_headings":"","what":"Decennial Census","title":"Even more censusapi examples","text":"Decennial Census documentation Get total population number housing units metropolitan/micropolitan statistical areas 2010. Get urban/rural status group variables (P2) metropolitan/micropolitan statistical areas 2010. Get 2010 population block group within specific tract.","code":"data2010 <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = c(\"NAME\", \"P001001\", \"H010001\"),      region = \"metropolitan statistical area/micropolitan statistical area:*\") head(data2010) # Show variable metadata for the P2 group group_p2 <- listCensusMetadata(     name = \"dec/sf1\",     vintage = 2010,     type = \"variables\",     group = \"P2\")  # Get the P2 variable group (URBAN AND RURAL) data2010 <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = \"group(P2)\",      region = \"metropolitan statistical area/micropolitan statistical area:*\") head(data2010) tract_pop <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = \"P001001\",      region = \"block:*\",     regionin = \"state:36+county:027+tract:010000\") head(tract_pop)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"decennial-census-self-response-rates","dir":"Articles","previous_headings":"Decennial Census","what":"Decennial Census Self-Response Rates","title":"Even more censusapi examples","text":"Decennial Census Self-Response Rates documentation Get self-response rates 2020 2010 Decennial Census state, county, tract, place . Get overall internet reponse rates counties. Get response rates places (cities, towns, etc) within New York state. Get final 2010 Decennial Census self-response rates.","code":"county_responses <- getCensus(     name = \"dec/responserate\",     vintage = 2020,     vars = c(\"NAME\", \"RESP_DATE\", \"CRRALL\", \"CRRINT\"),     region = \"county:*\") head(county_responses) ny_place_responses <- getCensus(     name = \"dec/responserate\",     vintage = 2020,     vars = c(\"NAME\", \"RESP_DATE\", \"CRRALL\", \"CRRINT\"),     region = \"place:*\",     regionin = \"state:36\") head(ny_place_responses) county_responses_2010 <- getCensus(     name = \"dec/responserate\",     vintage = 2010,     vars = c(\"NAME\", \"FSRR2010\"),     region = \"county:*\") head(county_responses_2010)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"decennial-census-surname-files","dir":"Articles","previous_headings":"Decennial Census","what":"Decennial Census Surname Files","title":"Even more censusapi examples","text":"Decennial Census Surname documentation Get counts top 25 popular surnames share race.","code":"top_surnames <- getCensus(     name = \"surname\",     vintage = 2010,     vars = c(\"NAME\", \"COUNT\", \"PROP100K\", \"PCTWHITE\", \"PCTBLACK\", \"PCTAIAN\", \"PCTAPI\", \"PCTHISPANIC\", \"PCT2PRACE\"),     RANK = \"1:25\") head(top_surnames)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"economic-census","dir":"Articles","previous_headings":"","what":"Economic Census","title":"Even more censusapi examples","text":"Economic Census documentation","code":"ewks_2012 <- getCensus(     name = \"ewks\",     vintage = 2012,     vars = c(\"EMP\", \"OPTAX\", \"GEOTYPE\"),     region = \"state:*\",     naics2012 = 54) head(ewks_2012) ewks_2007 <- getCensus(     name = \"ewks\",     vintage = 2007,     vars = c(\"EMP\", \"OPTAX\", \"GEOTYPE\"),     region = \"state:*\",     naics2007 = 54) head(ewks_2007)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"economic-indicators","dir":"Articles","previous_headings":"","what":"Economic Indicators","title":"Even more censusapi examples","text":"Economic Indicators documentation","code":"eits <- getCensus(     name = \"timeseries/eits/resconst\",     vars = c(\"cell_value\", \"data_type_code\", \"time_slot_id\", \"error_data\", \"category_code\", \"seasonally_adj\"),     region = \"us:*\",     time = \"from 2004-05 to 2012-12\") head(eits)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"health-insurance-small-area-health-insurance-estimates","dir":"Articles","previous_headings":"","what":"Health Insurance: Small Area Health Insurance Estimates","title":"Even more censusapi examples","text":"Health Insurance Statistics documentation Get uninsured rate income group county single year. Get uninsured rate county multiple years. Get uninsured rate non-elderly adults (AGECAT = 1) incomes 138 400% poverty line (IPRCAT = 5), race state.","code":"sahie <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),     region = \"county:*\",     year = 2019) head(sahie) sahie_annual <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\"),     region = \"county:037\",     regionin = \"state:06\",     year = \"2006:2019\") sahie_annual sahie_nonelderly <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\", \"RACECAT\", \"RACE_DESC\"),      region = \"state:*\",      year = 2019,     IPRCAT = 5,     AGECAT = 1) head(sahie_nonelderly)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"international-data-base","dir":"Articles","previous_headings":"","what":"International Data Base","title":"Even more censusapi examples","text":"International Data Base documentation Get Census Bureau projections 2020 populations life expectancy birth country. Get predictions population age 2050 Norway ages 10-18. https://api.census.gov/data/timeseries/idb/1year?get=AREA_KM2,NAME,AGE,POP&FIPS=&time=2050","code":"intl_pop <- getCensus(     name = \"timeseries/idb/5year\",     vars = c(\"NAME\", \"FIPS\", \"POP\", \"E0\"),     time = 2020) head(intl_pop) norway_pop <- getCensus(     name = \"timeseries/idb/1year\",     vars = c(\"NAME\", \"POP\"),     time = 2050,     FIPS = \"NO\",     AGE = \"10:18\") head(norway_pop)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"international-trade","dir":"Articles","previous_headings":"","what":"International Trade","title":"Even more censusapi examples","text":"International Trade documentation Note: international trade datasets buggy frequently give general error message “error running query. ’ve logged error ’ll correct ASAP. Sorry inconvenience.” error message comes U.S. Census Bureau. run repeated issues inconsistencies, contact Census Bureau help consider using bulk data download instead. Get general imports value imports consumption value end-use codes countries January 2018.","code":"imports <- getCensus(     name = \"timeseries/intltrade/imports/enduse\",     vars = c(\"CTY_CODE\", \"CTY_NAME\", \"I_ENDUSE\", \"I_ENDUSE_LDESC\", \"GEN_VAL_MO\", \"CON_VAL_MO\"),     time = \"2018-01\") head(imports)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"population-estimates-and-projections","dir":"Articles","previous_headings":"","what":"Population Estimates and Projections","title":"Even more censusapi examples","text":"Population Estimates Projections documentation","code":""},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"population-estimates","dir":"Articles","previous_headings":"Population Estimates and Projections","what":"Population Estimates","title":"Even more censusapi examples","text":"Population Estimates documentation Note variable names data structure PEP APIs always consistent year year.","code":"popest <- getCensus(     name = \"pep/population\",     vintage = 2019,     vars = c(\"POP\", \"DATE_DESC\"),     region = \"state:*\") head(popest) popest_housing <- getCensus(     name = \"pep/housing\",     vintage = 2018,     vars = c(\"DATE_CODE\", \"DATE_DESC\", \"HUEST\"),     region = \"county:195\",     regionin = \"state:02\") head(popest_housing)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"population-projections","dir":"Articles","previous_headings":"Population Estimates and Projections","what":"Population Projections","title":"Even more censusapi examples","text":"Population Projections documentation","code":"popproj <- getCensus(     name = \"pep/projpop\",     vintage = 2014,     vars = c(\"YEAR\", \"POP\", \"AGE\"),     region = \"us:1\") head(popproj)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"poverty-statistics","dir":"Articles","previous_headings":"","what":"Poverty Statistics","title":"Even more censusapi examples","text":"Poverty Statistics documentation","code":""},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"current-population-survey-poverty-statistics","dir":"Articles","previous_headings":"Poverty Statistics","what":"Current Population Survey Poverty Statistics","title":"Even more censusapi examples","text":"Get national poverty rates race past 50 years.","code":"poverty <- getCensus(     name = \"timeseries/poverty/histpov2\",     vars = c(\"RACE\", \"PCTPOV\"),     region = \"us:*\",     time = \"from 1970 to 2020\") head(poverty)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"small-area-income-and-poverty-estimates-saipe","dir":"Articles","previous_headings":"Poverty Statistics","what":"Small Area Income and Poverty Estimates (SAIPE)","title":"Even more censusapi examples","text":"Get poverty rate children overall single year. Get poverty rate children overall single county time.","code":"saipe <- getCensus(     name = \"timeseries/poverty/saipe\",     vars = c(\"NAME\", \"SAEPOVRT0_17_PT\", \"SAEPOVRTALL_PT\"),     region = \"state:*\",     year = 2019) head(saipe) saipe_years <- getCensus(     name = \"timeseries/poverty/saipe\",     vars = c(\"NAME\", \"SAEPOVRT0_17_PT\", \"SAEPOVRTALL_PT\"),     region = \"county:001\",     regionin = \"state:12\",     year = \"2000:2019\") head(saipe_years)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"saipe-school-districts","dir":"Articles","previous_headings":"Poverty Statistics","what":"SAIPE School Districts","title":"Even more censusapi examples","text":"Get number (SAEPOV5_17V_PT) rate (SAEPOVRAT5_17RV_PT) children ages 5-17 living poverty unified school districts Massachusetts.","code":"saipe_schools <- getCensus(     name = \"timeseries/poverty/saipe/schdist\",     vars = c(\"SD_NAME\", \"SAEPOV5_17V_PT\", \"SAEPOVRAT5_17RV_PT\"),     region = \"school district (unified):*\",     regionin = \"state:25\",     year = 2019) head(saipe_schools)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"public-sector-statistics","dir":"Articles","previous_headings":"","what":"Public Sector Statistics","title":"Even more censusapi examples","text":"Public Sector Statistics documentation endpoint includes data multiple surveys organized sure read Census Bureau’s documentation variable definitions labels. Get expenditures Public Elementary-Secondary School System Finances Massachusetts.","code":"govs <- getCensus(     name = \"timeseries/govs\",     vars = c(\"SVY_COMP_LABEL\", \"AGG_DESC\", \"AGG_DESC_LABEL\" ,\"AMOUNT\"),     region = \"state:25\",     year = \"2020\",     SVY_COMP = \"06\",     EXPENDTYPE = \"001\") head(govs)"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"quarterly-workforce-indicators","dir":"Articles","previous_headings":"","what":"Quarterly Workforce Indicators","title":"Even more censusapi examples","text":"Quarterly Workforce Indicators documentation QWI endpoints allow simple calls specfic ones. Make sure read documentation closely. ’s simple call gets employment data county. Got total employment average earnings quarter single state. ’s much specific call. Read Census Bureau’s documentation closely see options allowed QWI APIs.","code":"qwi_counties <- getCensus(     name = \"timeseries/qwi/sa\",     vars = c(\"Emp\", \"EarnBeg\"),     region = \"county:*\",     regionin = \"state:01\",     time = \"2016-Q1\") head(qwi_counties) qwi_time <- getCensus(     name = \"timeseries/qwi/sa\",     vars = c(\"Emp\", \"EarnBeg\"),     region = \"state:01\",     time = \"from 2018 to 2022\") head(qwi_time) qwi <- getCensus(     name = \"timeseries/qwi/sa\",     region = \"state:02\",     vars = c(\"Emp\", \"sex\"),     time = 2012,     quarter = 1,     agegrp = \"A07\",     ownercode = \"A05\",     firmsize = 1,     seasonadj = \"U\",     industry = 21) qwi"},{"path":"https://www.hrecht.com/censusapi/articles/example-list.html","id":"the-planning-database","dir":"Articles","previous_headings":"","what":"The Planning Database","title":"Even more censusapi examples","text":"Planning Database documentation Get population 2010 Census mail return rates block groups Autauga County, AL.","code":"pdb <- getCensus(     name = \"pdb/blockgroup\",     vintage = 2018,     vars = c(\"GIDBG\", \"County_name\", \"State_name\", \"Tot_Population_CEN_2010\", \"Mail_Return_Rate_CEN_2010\"),     region = \"block group:*\",     regionin = \"state:01+county:001\") head(pdb)"},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"api-key-setup","dir":"Articles","previous_headings":"","what":"API key setup","title":"Getting started with censusapi","text":"use Census APIs, sign API key, sent provided email address. ’ll need key use package. censusapi use default without extra work part. Within R, run: ’ve added census key system environment, censusapi use default without extra work part. instances might want put key .Renviron - example, ’re shared school computer. can always choose manually set key = \"YOURKEY\" argument getCensus() prefer.","code":"# Add key to .Renviron Sys.setenv(CENSUS_KEY=YOURKEYHERE) # Reload .Renviron readRenviron(\"~/.Renviron\") # Check to see that the expected key is output in your R console Sys.getenv(\"CENSUS_KEY\")"},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"finding-your-api","dir":"Articles","previous_headings":"","what":"Finding your API","title":"Getting started with censusapi","text":"get started, load censusapi library. see current table every available endpoint, uselistCensusApis(). data frame includes useful information making API call, including dataset’s name, description title, well contact email questions underyling data. returns useful information endpoint. title: Short written description dataset name: Programmatic name dataset, used censusapi vintage: Year survey, use endpoints type: Dataset type, either Aggregate, Microdata, Timeseries temporal: Time period dataset - documented sometimes url: Base URL endpoint modified: Date last modified description: Long written description dataset contact: Email address specific questions Census Bureau survey","code":"library(censusapi) apis <- listCensusApis() colnames(apis) #> [1] \"title\"       \"name\"        \"vintage\"     \"type\"        \"temporal\"    #> [6] \"url\"         \"modified\"    \"description\" \"contact\""},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"dataset-types","dir":"Articles","previous_headings":"Finding your API","what":"Dataset types","title":"Getting started with censusapi","text":"three types datasets included Census Bureau API universe: aggregate, microdata, timeseries. type names defined Census Bureau included column listCensusApis(). users work summary data, either aggregate timeseries datasets. Summary data contains pre-calculated numbers percentages given statistic — like number children state median household income. examples broader list censusapi examples use summary data. Aggregate datasets, like American Community Survey Decennial Census, include data one time period, usually one year. Datasets like American Community Survey contain thousands pre-computed variables. Timeseries datasets, including Small Area Income Poverty Estimates, Quarterly Workforce Estimates, International Trade statistics, allow users query data one time period just one API call. Microdata contains individual-level responses survey use custom analysis. One row represents one person. advanced analysts want use microdata. Learn microdata use censusapi Accessing microdata.","code":""},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"using-getcensus","dir":"Articles","previous_headings":"","what":"Using getCensus","title":"Getting started with censusapi","text":"main function censusapi getCensus(), makes API call given Census API returns data frame results. API slightly different parameters, always required arguments: name: programmatic name API defined Census, like “acs/acs5” “timeseries/bds/firms” vintage: dataset year, required non-timeseries APIs vars: list variables retrieve region: geography level retrieve, like state county APIs additional required optional arguments, like time, monthly, period. Check specific documentation API explore metadata listCensusMetadata() see options allowed. Let’s walk example getting uninsured rates income group using Small Area Health Insurance Estimates API, provides detailed annual state-level county-level estimates health insurance rates people age 65.","code":""},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"choosing-variables","dir":"Articles","previous_headings":"Using getCensus","what":"Choosing variables","title":"Getting started with censusapi","text":"censusapi includes metadata function called listCensusMetadata() get information API’s variable options geography options. Let’s see variables available SAHIE API:","code":"sahie_vars <- listCensusMetadata(     name = \"timeseries/healthins/sahie\",      type = \"variables\") head(sahie_vars)"},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"choosing-regions","dir":"Articles","previous_headings":"Using getCensus","what":"Choosing regions","title":"Getting started with censusapi","text":"can also use listCensusMetadata see geographic levels can get data using SAHIE API. API three geographic levels: us, county within states, state.","code":"listCensusMetadata(     name = \"timeseries/healthins/sahie\",      type = \"geography\")"},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"making-a-censusapi-call","dir":"Articles","previous_headings":"","what":"Making a censusapi call","title":"Getting started with censusapi","text":"First, using getCensus(), let’s get percent (PCTUI_PT) number (NUI_PT) people uninsured, using wildcard star (*) retrieve data counties. can also get data detailed income demographic groups SAHIE. ’ll use region specify county-level results regionin request uninsured rates income group (IPRCAT) Virginia. SAHIE API timeseries dataset (indicated name), can get multiple years data changing time = X time = \"X Y\". Let’s get data DeKalb County, Georgia using county fips code 089 state fips code 13. can look fips codes Census Bureau website. can also filter data income group using IPRCAT variable . IPRCAT = 3 represents <=138% federal poverty line. threshold Medicaid eligibility states expanded Affordable Care Act. Getting data Los Angeles county (fips code 06037) can see dramatic decrease uninsured rate income group California expanded Medicaid. can also get data useful demographics, like age group.","code":"sahie_counties <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\", \"NUI_PT\"),      region = \"county:*\",      time = 2019) head(sahie_counties) sahie_virginia <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"IPRCAT\", \"IPR_DESC\", \"PCTUI_PT\"),      region = \"county:*\",      regionin = \"state:51\",      time = 2019) head(sahie_virginia) sahie_years <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\"),      region = \"county:089\",      regionin = \"state:13\",     time = \"from 2006 to 2019\") sahie_years sahie_138 <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\", \"NUI_PT\"),      region = \"county:037\",      regionin = \"state:06\",      IPRCAT = 3,     time = \"from 2010 to 2019\") sahie_138 sahie_age <- getCensus(     name = \"timeseries/healthins/sahie\",     vars = c(\"NAME\", \"PCTUI_PT\", \"NUI_PT\", \"AGECAT\", \"AGE_DESC\"),      region = \"county:037\",      regionin = \"state:06\",     time = 2019) sahie_age"},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"annotations","dir":"Articles","previous_headings":"","what":"Annotations","title":"Getting started with censusapi","text":"Census datasets, inclduing American Community Survey, use annotated values. values use numbers symbols indicate data unavailable, topcoded, insufficient sample size, noteworthy characteristics. Read Census Bureau ACS annotation meanings ACS variable types. censusapi package intended return data -can receive unaltered annotations. using data small geography make sure check values like -666666666 check annotation columns non-empty values exclude needed. example, ’ll get median income associated annotations margin error, three census tracts Washington, DC — one available, one topcoded, one unavailable. Notice income topcoded $250,000 — meaning tract’s income threshold listed $250,001. available listed -666666666. can see annotations “EA” (estimate annotation) “MA” (margin error annotation) columns.","code":"acs_income <- getCensus(     name = \"acs/acs5\",     vintage = 2020,      vars = c(\"B19013_001E\", \"B19013_001EA\", \"B19013_001M\", \"B19013_001MA\"),      region = \"tract:006804,007703,000903\",     regionin = \"county:001&state:11\") acs_income"},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"variable-groups","dir":"Articles","previous_headings":"","what":"Variable groups","title":"Getting started with censusapi","text":"surveys, particularly American Community Survey Decennial Census, can get many related variables using group, defined Census Bureau. data tools, like American FactFinder, idea referred table. American Community Survey (ACS) APIs include estimates (variable names ending “E”), annotations, margins error, statistical significance, depending data set. Read ACS variable types annotation symbol meanings Census website. can retrieve annotation variables manually, specifying list variables. ’ll get estimate, margin error annotations median household income past 12 months Census tracts Alaska. can also retrieve also estimates annotations group variables one command. ’s group call table, B19013.","code":"acs_income <- getCensus(     name = \"acs/acs5\",     vintage = 2017,      vars = c(\"NAME\", \"B19013_001E\", \"B19013_001EA\", \"B19013_001M\", \"B19013_001MA\"),      region = \"tract:*\",      regionin = \"state:02\") head(acs_income) # See descriptions of the variables in group B19013 group_B19013 <- listCensusMetadata(     name = \"acs/acs5\",     vintage = 2017,     type = \"variables\",     group = \"B19013\") group_B19013 acs_income_group <- getCensus(     name = \"acs/acs5\",      vintage = 2017,      vars = c(\"NAME\", \"group(B19013)\"),      region = \"tract:*\",      regionin = \"state:02\") head(acs_income_group)"},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"advanced-geographies","dir":"Articles","previous_headings":"","what":"Advanced geographies","title":"Getting started with censusapi","text":"geographies, particularly Census tracts blocks, need specified within larger geographies like states counties. varies API endpoint, make sure read documentation specific API run listCensusMetadata() see available geographies. may want get get data many geographies require parent geography. example, tract-level data 2010 Decennial Census can requested one state time. example, use built fips list state FIPS codes request tract-level data state join single data frame. regionin argument getCensus() can also used string nested geographies, shown . 2010 Decennial Census summary file 1 requires specify state county retrieve block-level data. Use region request block level data, regionin specify desired state county. many examples advanced topics check articles.","code":"tracts <- NULL for (f in fips) {     stateget <- paste(\"state:\", f, sep=\"\")     temp <- getCensus(         name = \"dec/sf1\",         vintage = 2010,         vars = \"P001001\",         region = \"tract:*\",         regionin = stateget)     tracts <- rbind(tracts, temp) } head(tracts) data2010 <- getCensus(     name = \"dec/sf1\",     vintage = 2010,     vars = \"P001001\",      region = \"block:*\",     regionin = \"state:36+county:027+tract:010000\") head(data2010)"},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"Getting started with censusapi","text":"APIs contain hundreds API endpoints dozens datasets, work little differently. Census Bureau also makes frequent updates, unfortunately always announced advance. ’re getting error message unexpected results, things check.","code":""},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"variables","dir":"Articles","previous_headings":"Troubleshooting","what":"Variables","title":"Getting started with censusapi","text":"Use listCensusMetadata(type = \"variables\") endpoint see variables available. Occasionally variable names change data updates API updates. Variable names commonly change ACS Decennial survey years. Census APIs case-sensitive, means variable name want uppercase ’ll need write uppercase request. APIs use uppercase variable names, use lowercase even use sentence case.","code":""},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"geographies","dir":"Articles","previous_headings":"Troubleshooting","what":"Geographies","title":"Getting started with censusapi","text":"Use listCensusMetadata(type = \"geographies\") dataset check geographies can use. API list valid geographies occasionally change Census Bureau makes updates. ’re specifying region FIPS code, example state:01, make sure use full code, padded 0s necessary. APIs always enforce (previously, state:1 usually worked), now . See Census Bureau fIPS reference valid FIPS codes.","code":""},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"unexpected-errors","dir":"Articles","previous_headings":"Troubleshooting","what":"Unexpected errors","title":"Getting started with censusapi","text":"Occasionally might get general error message \"error running query.  logged error correct ASAP.  Sorry inconvenience.\" comes Census Bureau caused number problems, including server issues. Try rerunning API call. doesn’t work requesting large amount data, try reducing amount ’re requesting, example getting data one state time. ’re still trouble, see ways get help.","code":""},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"other-ways-to-get-help","dir":"Articles","previous_headings":"Troubleshooting","what":"Other ways to get help","title":"Getting started with censusapi","text":"Open Github issue bugs issues R package. Join public Census Bureau Slack channel ask question R API rooms. Email Census Bureau API team census.data@census.gov questions relating underlying data APIs. Make sure include underlying API call ’re trouble specific API request, R code. can see API call censusapi error message. can also reach contact listed dataset metadata found listCensusApis() questions specific survey.","code":""},{"path":"https://www.hrecht.com/censusapi/articles/getting-started.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"Additional resources","title":"Getting started with censusapi","text":"Census Data API User Guide","code":""},{"path":"https://www.hrecht.com/censusapi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hannah Recht. Author, maintainer.","code":""},{"path":"https://www.hrecht.com/censusapi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Recht H (2022). censusapi: Retrieve Data Census APIs. https://www.hrecht.com/censusapi/, https://github.com/hrecht/censusapi.","code":"@Manual{,   title = {censusapi: Retrieve Data from the Census APIs},   author = {Hannah Recht},   year = {2022},   note = {https://www.hrecht.com/censusapi/, https://github.com/hrecht/censusapi}, }"},{"path":"https://www.hrecht.com/censusapi/index.html","id":"censusapi","dir":"","previous_headings":"","what":"Retrieve Data from the Census APIs","title":"Retrieve Data from the Census APIs","text":"censusapi lightweight package get data U.S. Census Bureau’s APIs. 1,000 Census API endpoints available, including Decennial Census, American Community Survey, Poverty Statistics, Population Estimates, Census microdata. package designed let get data APIs using main functions syntax every dataset. getCensus() designed work new Census API endpoint released, long conforms Census’s existing standards. package also includes metadata functions users determine datasets available dataset, variables, geographies, groups can used.","code":""},{"path":"https://www.hrecht.com/censusapi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Retrieve Data from the Census APIs","text":"Get latest stable release CRAN: can also install latest development version censusapi Github using devtools: learn using censusapi, read package documentation articles https://www.hrecht.com/censusapi/.","code":"install.packages(\"censusapi\") # Install the devtools package if needed # install.packages(\"devtools\") devtools::install_github(\"hrecht/censusapi\")"},{"path":"https://www.hrecht.com/censusapi/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Retrieve Data from the Census APIs","text":"product uses Census Bureau Data API endorsed certified Census Bureau. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://www.hrecht.com/censusapi/reference/fips.html","id":null,"dir":"Reference","previous_headings":"","what":"List of state fips codes - 50 states plus DC — fips","title":"List of state fips codes - 50 states plus DC — fips","text":"small geographies Census APIs can used state hierarchy. list fips codes may looped retrieve data states.","code":""},{"path":"https://www.hrecht.com/censusapi/reference/fips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of state fips codes - 50 states plus DC — fips","text":"","code":"fips"},{"path":"https://www.hrecht.com/censusapi/reference/fips.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of state fips codes - 50 states plus DC — fips","text":"list fips codes 50 states District Columbia","code":""},{"path":"https://www.hrecht.com/censusapi/reference/fips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of state fips codes - 50 states plus DC — fips","text":"","code":"fips #>  [1] \"01\" \"02\" \"04\" \"05\" \"06\" \"08\" \"09\" \"10\" \"11\" \"12\" \"13\" \"15\" \"16\" \"17\" \"18\" #> [16] \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" #> [31] \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"44\" \"45\" \"46\" \"47\" \"48\" \"49\" #> [46] \"50\" \"51\" \"53\" \"54\" \"55\" \"56\""},{"path":"https://www.hrecht.com/censusapi/reference/getCensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Census data from a given API — getCensus","title":"Retrieve Census data from a given API — getCensus","text":"Retrieve Census data given API","code":""},{"path":"https://www.hrecht.com/censusapi/reference/getCensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Census data from a given API — getCensus","text":"","code":"getCensus(   name,   vintage = NULL,   key = Sys.getenv(\"CENSUS_KEY\"),   vars,   region = NULL,   regionin = NULL,   time = NULL,   year = NULL,   date = NULL,   period = NULL,   monthly = NULL,   show_call = FALSE,   convert_variables = TRUE,   category_code = NULL,   data_type_code = NULL,   naics = NULL,   pscode = NULL,   naics2012 = NULL,   naics2007 = NULL,   naics2002 = NULL,   naics1997 = NULL,   sic = NULL,   ... )"},{"path":"https://www.hrecht.com/censusapi/reference/getCensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Census data from a given API — getCensus","text":"name programmatic name dataset, e.g. `timeseries/poverty/saipe` `acs/acs5`. See `listCensusApis()` options. vintage Vintage (year) dataset, e.g. 2014. required timeseries APIs. key Census API key, obtained https://api.census.gov/data/key_signup.html. function default `CENSUS_KEY` stored .Renviron available. vars List variables get. Required. region Geography get. regionin Optional hierarchical geography limit region. time, year, date, period, monthly Optional arguments used time series APIs. show_call List underlying API call sent Census Bureau. convert_variables Convert likely numeric variables numeric data. Default true. false, results characters, type returned Census Bureau. category_code, data_type_code, naics, pscode, naics2012, naics2007, naics2002, naics1997, sic Optional arguments used economic data APIs. ... valid arguments pass Census API. Note: APIs case sensitive.","code":""},{"path":"https://www.hrecht.com/censusapi/reference/getCensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Census data from a given API — getCensus","text":"","code":"# \\dontrun{ # Get total population and median household income for places (cities, towns, villages) # in one state from the 5-year ACS. acs_simple <- getCensus(   name = \"acs/acs5\",   vintage = 2020,   vars = c(\"NAME\", \"B01001_001E\", \"B19013_001E\"),   region = \"place:*\",   regionin = \"state:01\") head(acs_simple) #>   state place                         NAME B01001_001E B19013_001E #> 1    01 44536    Lowndesboro town, Alabama          75       41667 #> 2    01 44608         Loxley town, Alabama        2767       62292 #> 3    01 44728        Luverne city, Alabama        2742       48468 #> 4    01 44800           Lynn town, Alabama         832       36115 #> 5    01 45040         McCalla CDP, Alabama       12077       71061 #> 6    01 45208 McDonald Chapel CDP, Alabama         662       49038  # Get all data from the B19013 variable group. # This returns estimates as well as margins of error and annotation flags. acs_group <- getCensus(   name = \"acs/acs5\",   vintage = 2020,   vars = c(\"B01001_001E\", \"group(B19013)\"),   region = \"place:*\",   regionin = \"state:01\") head(acs_group) #>   state place B01001_001E B19013_001E B19013_001EA B19013_001M B19013_001MA #> 1    01 44536          75       41667         <NA>       27339         <NA> #> 2    01 44608        2767       62292         <NA>       17233         <NA> #> 3    01 44728        2742       48468         <NA>       10129         <NA> #> 4    01 44800         832       36115         <NA>        8289         <NA> #> 5    01 45040       12077       71061         <NA>        3184         <NA> #> 6    01 45208         662       49038         <NA>       11453         <NA> #>             GEO_ID                         NAME #> 1 1600000US0144536    Lowndesboro town, Alabama #> 2 1600000US0144608         Loxley town, Alabama #> 3 1600000US0144728        Luverne city, Alabama #> 4 1600000US0144800           Lynn town, Alabama #> 5 1600000US0145040         McCalla CDP, Alabama #> 6 1600000US0145208 McDonald Chapel CDP, Alabama  # Retreive 2010 Decennial Census block-level data within a specific tract, # using the regionin argument to precisely specify the Census tract. decennial_2010 <- getCensus(   name = \"dec/sf1\",   vintage = 2010,   vars = c(\"NAME\",\"P001001\"),   region = \"block:*\",   regionin = \"state:36+county:027+tract:010000\") head(decennial_2010) #>   state county  tract block #> 1    36    027 010000  1000 #> 2    36    027 010000  1011 #> 3    36    027 010000  1028 #> 4    36    027 010000  1001 #> 5    36    027 010000  1031 #> 6    36    027 010000  1002 #>                                                                     NAME #> 1 Block 1000, Block Group 1, Census Tract 100, Dutchess County, New York #> 2 Block 1011, Block Group 1, Census Tract 100, Dutchess County, New York #> 3 Block 1028, Block Group 1, Census Tract 100, Dutchess County, New York #> 4 Block 1001, Block Group 1, Census Tract 100, Dutchess County, New York #> 5 Block 1031, Block Group 1, Census Tract 100, Dutchess County, New York #> 6 Block 1002, Block Group 1, Census Tract 100, Dutchess County, New York #>   P001001 #> 1      31 #> 2      17 #> 3      41 #> 4       0 #> 5       0 #> 6       4  # Get poverty rates for children and for people of all ages over time using the # Small Area Income and Poverty Estimates API saipe <- getCensus(   name = \"timeseries/poverty/saipe\",   vars = c(\"NAME\", \"SAEPOVRT0_17_PT\", \"SAEPOVRTALL_PT\"),   region = \"state:01\",   year = \"2000:2019\") head(saipe) #>   state    NAME SAEPOVRT0_17_PT SAEPOVRTALL_PT YEAR #> 1    01 Alabama            20.5           14.6 2000 #> 2    01 Alabama            22.1           15.7 2001 #> 3    01 Alabama            21.6           15.4 2002 #> 4    01 Alabama            22.3           15.3 2003 #> 5    01 Alabama            22.6           16.1 2004 #> 6    01 Alabama            24.3           16.9 2005  # Get County Business Patterns data for a specific NAICS sector. cbp_2016 <- getCensus(  name = \"cbp\",   vintage = \"2016\",   vars = c(\"EMP\", \"ESTAB\", \"NAICS2012_TTL\", \"GEO_TTL\"),   region = \"state:*\",   naics2012 = \"23\") head(cbp_2016) #>   state    EMP ESTAB NAICS2012_TTL     GEO_TTL NAICS2012 #> 1    27 118033 16360  Construction   Minnesota        23 #> 2    28  44551  3796  Construction Mississippi        23 #> 3    29 121494 13263  Construction    Missouri        23 #> 4    30  25036  5326  Construction     Montana        23 #> 5    31  45909  6357  Construction    Nebraska        23 #> 6    32  72817  4839  Construction      Nevada        23 # }"},{"path":"https://www.hrecht.com/censusapi/reference/getFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function: Get the API response, return a data frame — getFunction","title":"Internal function: Get the API response, return a data frame — getFunction","text":"Internal function: Get API response, return data frame","code":""},{"path":"https://www.hrecht.com/censusapi/reference/getFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function: Get the API response, return a data frame — getFunction","text":"","code":"getFunction(   apiurl,   name,   key,   get,   region,   regionin,   time,   year,   date,   period,   monthly,   show_call,   convert_variables,   category_code,   data_type_code,   naics,   pscode,   naics2012,   naics2007,   naics2002,   naics1997,   sic,   ... )"},{"path":"https://www.hrecht.com/censusapi/reference/getFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function: Get the API response, return a data frame — getFunction","text":"apiurl, key, get, region, time, etc","code":""},{"path":"https://www.hrecht.com/censusapi/reference/listCensusApis.html","id":null,"dir":"Reference","previous_headings":"","what":"Get useful dataset metadata on all available APIs as a data frame — listCensusApis","title":"Get useful dataset metadata on all available APIs as a data frame — listCensusApis","text":"Scrapes https://api.census.gov/data.json returns dataframe includes: title, description, name, vintage, url, dataset type, useful fields.","code":""},{"path":"https://www.hrecht.com/censusapi/reference/listCensusApis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get useful dataset metadata on all available APIs as a data frame — listCensusApis","text":"","code":"listCensusApis()"},{"path":"https://www.hrecht.com/censusapi/reference/listCensusApis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get useful dataset metadata on all available APIs as a data frame — listCensusApis","text":"","code":"apis <- listCensusApis() head(apis) #>                                      title          name vintage      type #> 1 Current Population Survey: Basic Monthly cps/basic/apr    2022 Microdata #> 2 Current Population Survey: Basic Monthly cps/basic/feb    2022 Microdata #> 3 Current Population Survey: Basic Monthly cps/basic/jan    2022 Microdata #> 4 Current Population Survey: Basic Monthly cps/basic/jun    2022 Microdata #> 5 Current Population Survey: Basic Monthly cps/basic/mar    2022 Microdata #> 6 Current Population Survey: Basic Monthly cps/basic/may    2022 Microdata #>          temporal                                           url #> 1 2022-04/2022-04 http://api.census.gov/data/2022/cps/basic/apr #> 2 2022-02/2022-02 http://api.census.gov/data/2022/cps/basic/feb #> 3 2022-01/2022-01 http://api.census.gov/data/2022/cps/basic/jan #> 4 2022-06/2022-06 http://api.census.gov/data/2022/cps/basic/jun #> 5 2022-03/2022-03 http://api.census.gov/data/2022/cps/basic/mar #> 6 2022-05/2022-05 http://api.census.gov/data/2022/cps/basic/may #>                modified #> 1 2022-01-19 00:00:00.0 #> 2 2022-01-19 00:00:00.0 #> 3 2022-01-19 00:00:00.0 #> 4 2022-01-19 00:00:00.0 #> 5 2022-01-19 00:00:00.0 #> 6 2022-01-19 00:00:00.0 #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          description #> 1 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 2 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 3 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 4 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 5 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #> 6 To provide estimates of employment, unemployment, and other characteristics of the general labor force, of the population as a whole, and of various subgroups of the population. Monthly labor force data for the country are used by the &lt;ahref=\"http://www.bls.gov\"&gt;Bureau of Labor Statistics (BLS)&lt;/a&gt; to determine the distribution of funds under the Job Training Partnership Act. These data are collected through combined computer-assisted personal interviewing (CAPI) and computer-assisted telephone interviewing (CATI). In addition to the labor force data, the CPS basic funding provides annual data on work experience, income, health insurance, and migration data from the Annual Social and Economic Supplement (ASEC), and on school enrollment of the population from the October Supplement. Other supplements, some of which are sponsored by other agencies, are conducted biennially or intermittently. #>              contact #> 1 dsd.cps@census.gov #> 2 dsd.cps@census.gov #> 3 dsd.cps@census.gov #> 4 dsd.cps@census.gov #> 5 dsd.cps@census.gov #> 6 dsd.cps@census.gov"},{"path":"https://www.hrecht.com/censusapi/reference/listCensusMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a specific API as a data frame — listCensusMetadata","title":"Get information about a specific API as a data frame — listCensusMetadata","text":"Get information specific API data frame","code":""},{"path":"https://www.hrecht.com/censusapi/reference/listCensusMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a specific API as a data frame — listCensusMetadata","text":"","code":"listCensusMetadata(   name,   vintage = NULL,   type = \"variables\",   group = NULL,   variable_name = NULL,   include_values = FALSE )"},{"path":"https://www.hrecht.com/censusapi/reference/listCensusMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about a specific API as a data frame — listCensusMetadata","text":"name API programmatic name - e.g. acs/acs5. See list names listCensusApis(). vintage Vintage (year) dataset. required timeseries APIs type Type metadata return. Options : * `variables` (default) - list variable names descriptions dataset. * `geographies` - available geographies. * `groups` - available variable groups. used datasets. * `values` - encoded value labels given variable. Pair    `variable_name`. used datasets. group optional variable group code, used return metadata specific group variables . Variable groups used APIs. variable_name name specific variable used return value labels variable. Value labels published APIs. include_values Use `type = \"variables\"`. Include value metadata variables dataset value metadata exists. Default \"FALSE\".","code":""},{"path":"https://www.hrecht.com/censusapi/reference/listCensusMetadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about a specific API as a data frame — listCensusMetadata","text":"","code":"# \\dontrun{  # List the variables available in the Small Area Health Insurance Estimates. sahie_variables <- listCensusMetadata(   name = \"timeseries/healthins/sahie\",   type = \"variables\")  head(sahie_variables) #>        name #> 1       for #> 2        in #> 3      time #> 4 NIPR_LB90 #> 5   NIPR_PT #> 6    AGECAT #>                                                                                            label #> 1                                                                   Census API FIPS 'for' clause #> 2                                                                    Census API FIPS 'in' clause #> 3                                                                       ISO-8601 Date/Time value #> 4 Number in Demographic Group for Selected Income Range, Lower Bound for 90% Confidence Interval #> 5                                Number in Demographic Group for Selected Income Range, Estimate #> 6                                                                                   Age Category #>                              concept predicateType group limit predicateOnly #> 1 Census API Geography Specification      fips-for   N/A     0          TRUE #> 2 Census API Geography Specification       fips-in   N/A     0          TRUE #> 3 Census API Date/Time Specification      datetime   N/A     0          TRUE #> 4                Uncertainty Measure           int   N/A     0          <NA> #> 5                           Estimate           int   N/A     0          <NA> #> 6                     Demographic ID           int   N/A     6          <NA> #>            required #> 1              <NA> #> 2              <NA> #> 3              true #> 4              <NA> #> 5              <NA> #> 6 default displayed  # List the geographies available in the 5-year 2020 American Community Survey. acs_geographies <- listCensusMetadata(   name = \"acs/acs5\",   vintage = 2020,   type = \"geographies\")  head(acs_geographies) #>                 name geoLevelDisplay referenceDate      requires wildcard #> 1                 us             010    2020-01-01          NULL     NULL #> 2             region             020    2020-01-01          NULL     NULL #> 3           division             030    2020-01-01          NULL     NULL #> 4              state             040    2020-01-01          NULL     NULL #> 5             county             050    2020-01-01         state    state #> 6 county subdivision             060    2020-01-01 state, county   county #>   optionalWithWCFor #> 1              <NA> #> 2              <NA> #> 3              <NA> #> 4              <NA> #> 5             state #> 6            county  # List the variable groups available in the 5-year 2020 American Community Survey. acs_groups <- listCensusMetadata(   name = \"acs/acs5\",   vintage = 2020,   type = \"groups\")  head(acs_groups) #>     name #> 1 B17015 #> 2 B18104 #> 3 B17016 #> 4 B18105 #> 5 B17017 #> 6 B18106 #>                                                                                                                                                         description #> 1 POVERTY STATUS IN THE PAST 12 MONTHS OF FAMILIES BY FAMILY TYPE BY SOCIAL SECURITY INCOME BY SUPPLEMENTAL SECURITY INCOME (SSI) AND CASH PUBLIC ASSISTANCE INCOME #> 2                                                                                                                                SEX BY AGE BY COGNITIVE DIFFICULTY #> 3                                                      POVERTY STATUS IN THE PAST 12 MONTHS OF FAMILIES BY FAMILY TYPE BY WORK EXPERIENCE OF HOUSEHOLDER AND SPOUSE #> 4                                                                                                                               SEX BY AGE BY AMBULATORY DIFFICULTY #> 5                                                                                      POVERTY STATUS IN THE PAST 12 MONTHS BY HOUSEHOLD TYPE BY AGE OF HOUSEHOLDER #> 6                                                                                                                                SEX BY AGE BY SELF-CARE DIFFICULTY #>                                                     variables       universe  #> 1 http://api.census.gov/data/2020/acs/acs5/groups/B17015.json          FAMILY #> 2 http://api.census.gov/data/2020/acs/acs5/groups/B18104.json NONINST_05_OVER #> 3 http://api.census.gov/data/2020/acs/acs5/groups/B17016.json          FAMILY #> 4 http://api.census.gov/data/2020/acs/acs5/groups/B18105.json NONINST_05_OVER #> 5 http://api.census.gov/data/2020/acs/acs5/groups/B17017.json           HSHLD #> 6 http://api.census.gov/data/2020/acs/acs5/groups/B18106.json NONINST_05_OVER # Create a data dictionary with all variable names and encoded values for # a microdata API. cbp_dict <- listCensusMetadata(   name = \"cbp\",   vintage = 2020,   type = \"variables\",   include_values = TRUE)  head(cbp_dict) #>        name                                      label #> 1       for               Census API FIPS 'for' clause #> 2        in                Census API FIPS 'in' clause #> 3     ucgid Uniform Census Geography Identifier clause #> 4     EMP_N        Noise range for number of employees #> 5     STATE                                  Geography #> 6 PAYQTR1_N      Noise range for first-quarter payroll #>                                                                                                                                                                                     concept #> 1                                                                                                                                                        Census API Geography Specification #> 2                                                                                                                                                        Census API Geography Specification #> 3                                                                                                                                                        Census API Geography Specification #> 4 All Sectors: County Business Patterns, including ZIP Code Business Patterns, by Legal Form of Organization and Employment Size Class for the U.S., States, and Selected Geographies: 2020 #> 5                                                                                                                                                                                      <NA> #> 6 All Sectors: County Business Patterns, including ZIP Code Business Patterns, by Legal Form of Organization and Employment Size Class for the U.S., States, and Selected Geographies: 2020 #>   predicateType     group limit predicateOnly hasGeoCollectionSupport #> 1      fips-for       N/A     0          TRUE                    <NA> #> 2       fips-in       N/A     0          TRUE                    <NA> #> 3         ucgid       N/A     0          TRUE                    TRUE #> 4           int CB2000CBP     0          <NA>                    <NA> #> 5          <NA>       N/A     0          <NA>                    <NA> #> 6           int CB2000CBP     0          <NA>                    <NA> #>    attributes required values_code values_label #> 1        <NA>     <NA>        <NA>         <NA> #> 2        <NA>     <NA>        <NA>         <NA> #> 3        <NA>     <NA>        <NA>         <NA> #> 4     EMP_N_F     <NA>        <NA>         <NA> #> 5        <NA>     <NA>        <NA>         <NA> #> 6 PAYQTR1_N_F     <NA>        <NA>         <NA>  # List the value labels of the NAICS2017 variable in the 2020 County # Business Patterns dataset. cbp_naics_values <- listCensusMetadata(   name = \"cbp\",   vintage = 2020,   type = \"values\",   variable = \"NAICS2017\")  head(cbp_naics_values) #>     code                                      label #> 1     00                      Total for all sectors #> 2 000000                             Industry total #> 3     11 Agriculture, forestry, fishing and hunting #> 4    111                            Crop production #> 5   1111                  Oilseed and grain farming #> 6  11111                            Soybean farming  # List of variables that are included in the B17020 group in the # 5-year American Community Survey. group_B17020 <- listCensusMetadata(   name = \"acs/acs5\",   vintage = 2017,   type = \"variables\",   group = \"B17020\")  head(group_B17020) #>           name #> 1 B17020_017EA #> 2 B17020_016MA #> 3 B17020_016EA #> 4 B17020_015MA #> 5 B17020_015EA #> 6 B17020_014EA #>                                                                                                          label #> 1     Annotation of Estimate!!Total!!Income in the past 12 months at or above poverty level!!85 years and over #> 2 Annotation of Margin of Error!!Total!!Income in the past 12 months at or above poverty level!!75 to 84 years #> 3        Annotation of Estimate!!Total!!Income in the past 12 months at or above poverty level!!75 to 84 years #> 4 Annotation of Margin of Error!!Total!!Income in the past 12 months at or above poverty level!!60 to 74 years #> 5        Annotation of Estimate!!Total!!Income in the past 12 months at or above poverty level!!60 to 74 years #> 6        Annotation of Estimate!!Total!!Income in the past 12 months at or above poverty level!!18 to 59 years #>                                       concept predicateType  group limit #> 1 POVERTY STATUS IN THE PAST 12 MONTHS BY AGE        string B17020     0 #> 2 POVERTY STATUS IN THE PAST 12 MONTHS BY AGE        string B17020     0 #> 3 POVERTY STATUS IN THE PAST 12 MONTHS BY AGE        string B17020     0 #> 4 POVERTY STATUS IN THE PAST 12 MONTHS BY AGE        string B17020     0 #> 5 POVERTY STATUS IN THE PAST 12 MONTHS BY AGE        string B17020     0 #> 6 POVERTY STATUS IN THE PAST 12 MONTHS BY AGE        string B17020     0 #>   predicateOnly #> 1          TRUE #> 2          TRUE #> 3          TRUE #> 4          TRUE #> 5          TRUE #> 6          TRUE # }"},{"path":"https://www.hrecht.com/censusapi/reference/makeVarlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Use variable metadata to find variables containing a given string. — makeVarlist","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"Return list variable names data frame variable metadata containing given string. can used create list variables later pass getCensus, data frame documenting variables used given project.","code":""},{"path":"https://www.hrecht.com/censusapi/reference/makeVarlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"","code":"makeVarlist(name, vintage = NULL, find, varsearch = \"all\", output = \"list\")"},{"path":"https://www.hrecht.com/censusapi/reference/makeVarlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"name API name - e.g. acs5. See list https://api.census.gov/data.html vintage Year dataset, e.g. 2014 - required timeseries APIs find string find variable metadata varsearch Optional argument specifying fields search. Default \"\". Options \"\", \"name\", \"label\", \"concept\". output Optional argument, specifying output \"list\" \"dataframe\". Default \"list\".","code":""},{"path":"https://www.hrecht.com/censusapi/reference/makeVarlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use variable metadata to find variables containing a given string. — makeVarlist","text":"","code":"# Return a list, and then use getCensus function to retrieve those variables # \\dontrun{ myvars <- makeVarlist(name = \"timeseries/poverty/saipe\",   find = \"Ages 0-4\",   varsearch = \"label\") myvars #> [1] \"SAEPOVRT0_4_MOE\"  \"SAEPOVRT0_4_UB90\" \"SAEPOVRT0_4_LB90\" \"SAEPOVRT0_4_PT\"   #> [5] \"SAEPOV0_4_PT\"     \"SAEPOVU_0_4\"      \"SAEPOV0_4_MOE\"    \"SAEPOV0_4_UB90\"   #> [9] \"SAEPOV0_4_LB90\"   saipe_dt <- getCensus(name = \"timeseries/poverty/saipe\",   time = 2016,   vars = myvars,   region = \"state:*\") head(saipe_dt) #>   time state SAEPOVRT0_4_MOE SAEPOVRT0_4_UB90 SAEPOVRT0_4_LB90 SAEPOVRT0_4_PT #> 1 2016    01             1.5             28.9             25.9           27.4 #> 2 2016    02             1.9             17.0             13.2           15.1 #> 3 2016    04             1.2             26.1             23.7           24.9 #> 4 2016    05             1.8             29.1             25.5           27.3 #> 5 2016    06             0.5             21.2             20.2           20.7 #> 6 2016    08             1.2             15.1             12.7           13.9 #>   SAEPOV0_4_PT SAEPOVU_0_4 SAEPOV0_4_MOE SAEPOV0_4_UB90 SAEPOV0_4_LB90 #> 1        78675      287177          4418          83093          74257 #> 2         7919       52408          1021           8940           6898 #> 3       106817      428317          5131         111948         101686 #> 4        50341      184115          3246          53587          47095 #> 5       502432     2430975         13017         515449         489415 #> 6        46111      330815          3894          50005          42217 # }"},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-080","dir":"Changelog","previous_headings":"","what":"censusapi 0.8.0","title":"censusapi 0.8.0","text":"listCensusApis() new columns resulting data frame available API endpoints: API contact email address type: either Aggregate, Timeseries, Microdata. listCensusMetadata() new functionality use value metadata. particularly useful economic datasets microdata APIs. Use type = \"variables\" include_values = TRUE create dictionary value labels given dataset. get value labels single variable given dataset, use type = \"values\" variable = \"VARIABLE INTEREST\". Note: metadata, incredibly useful, exists datasets. datasets ’ll still need reference external files Census Bureau adds functionality. example, get value labels NAICS2017 County Business Patterns dataset: make full dictionary Current Population Survey Voting Patterns microdata API: getCensus() new option convert_variables re discussion (#68) (#80). default TRUE — previous versions, converts columns numbers R’s numeric data type. Setting convert variables = FALSE leaves columns original character data type returned Census Bureau. listCensusMetadata() now properly handles metadata attribute names new Microdata APIs contain invalid JSON. solves (#84). Documentation examples updated. new vignette: Accessing microdata.","code":"cbp_naics_values <- listCensusMetadata(     name = \"cbp\",     vintage = 2020,     type = \"values\",     variable = \"NAICS2017\") cbp_dict <- listCensusMetadata(     name = \"cbp\",     vintage = 2020,     type = \"variables\",     include_values = TRUE)"},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-073","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.3","title":"censusapi 0.7.3","text":"Properly types certain variables international trade timeseries APIs.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-072","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.2","title":"censusapi 0.7.2","text":"Adds named parameter YEAR getCensus() per changes timeseries endpoints previously used TIME parameter. Updates examples using SAHIE SAIPE APIs per Census Bureau changes endpoints.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-071","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.1","title":"censusapi 0.7.1","text":"CRAN release: 2020-10-14 Removes listCensusMetadata() masterlist examples used Business Dynamic Statistics endpoints, recently deprecated.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-070","dir":"Changelog","previous_headings":"","what":"censusapi 0.7.0","title":"censusapi 0.7.0","text":"CRAN release: 2020-09-07 Adds show_call option getCensus(), shows underlying API call (otherwise shown errors) link package documentation used. Converts improperly formatted string “N/” “NULL” values underlying Census data true NA values. Keeps 2017 NAICS variables characters, instead erroneously converting numeric. Parses endpoint numeric variables -character variable names numeric several popular endpoints: SAHIE, SAIPE, ZBP, CBP, PEP Decennial Response Rates. Removes examples deprecated 1990 2000 Decennial endpoints.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-061","dir":"Changelog","previous_headings":"","what":"censusapi 0.6.1","title":"censusapi 0.6.1","text":"Updates web link FIPS codes reference Census website reorganization. Adds examples Decennial Census response rates, updates several examples retrieve newer data. Removes example masterlist package due size, online .","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-060","dir":"Changelog","previous_headings":"","what":"censusapi 0.6.0","title":"censusapi 0.6.0","text":"CRAN release: 2019-04-13 Allows use miscellaneous paramaters getCensus(). allows users specify valid API argument name pass value, giving full access underlying Census Bureau APIs. Adds group parameter listCensusMetadata(). allows users get variable metadata specified variable group. Improves internal logic listCensusMetadata(). Add documentation examples using miscellaneous paramaters. Returns underlying API call error messages, particularly useful users needing Census Bureau. Specifies tract block group example due underlying API changes. Adds Contributor Code Conduct.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-050","dir":"Changelog","previous_headings":"","what":"censusapi 0.5.0","title":"censusapi 0.5.0","text":"Makes region optional argument getCensus, rather required. Pads fips codes stored fips dataset zeroes.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-041","dir":"Changelog","previous_headings":"","what":"censusapi 0.4.1","title":"censusapi 0.4.1","text":"CRAN release: 2018-08-19 Adds groups type option listCensusMetadata. Fixes bug listCensusMetadata variables call caused underlying Census API change, renamed validValues values endpoints. Converts variable metadata columns factors characters. Applies numeric conversion exclusions API endpoints. Improves language surrounding error messages Census Bureau returns. Updates 2010 Decennial Census examples use new 2010 dec/sf1 endpoint, replace 2010 sf1 endpoint August 30, 2018.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-040","dir":"Changelog","previous_headings":"","what":"censusapi 0.4.0","title":"censusapi 0.4.0","text":"Adds support NAICS code arguments used Business Patterns APIs, Economic Census APIs, Annual Survey Manufactures APIs.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-030","dir":"Changelog","previous_headings":"","what":"censusapi 0.3.0","title":"censusapi 0.3.0","text":"CRAN release: 2018-05-02 convert ACS annotation flag variables numeric columns. Puts lowercase variable name columns first (geographies), rather non-numeric columns. Changes punctuation returned column names underscores, removing repeated underscores trailing punctuation. Uses consistent spacing examples. Updates examples using ACS data latest year using new acs/acs5 endpoint adds variable group examples.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-021","dir":"Changelog","previous_headings":"","what":"censusapi 0.2.1","title":"censusapi 0.2.1","text":"CRAN release: 2017-08-01 Fixes bug listCensusMetadata variables call caused underlying Census API changes.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-020","dir":"Changelog","previous_headings":"","what":"censusapi 0.2.0","title":"censusapi 0.2.0","text":"CRAN release: 2017-06-06 Updated examples, documentation, vignette.","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-012","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.2","title":"censusapi 0.1.2","text":"Fixes bug caused single-row responses throw error","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-011","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.1","title":"censusapi 0.1.1","text":"Uses https rather http requests. Census Bureau announced APIs https-beginning August 28, 2017. Note: change generally increased run time retrieving variable metadata listCensusMetadata. APIs, function run one second. lag may noticeable American Community Survey APIs, 40,000 variables. Improvements planned future releases. listCensusMetadata allows full word single letter argument type parameter","code":""},{"path":"https://www.hrecht.com/censusapi/news/index.html","id":"censusapi-010","dir":"Changelog","previous_headings":"","what":"censusapi 0.1.0","title":"censusapi 0.1.0","text":"Scrapes http://api.census.gov/data.json rather .html listCensusApis, starts removing XML dependency. .json data also includes several fields present .html file, useful added returned data frame. Changes dataset used listCensusMetadata examples, mainly build/checks speed. Set getCensus(key) argument’s default value CENSUS_KEY .Renviron. Explicitly encourages Census key added .Renviron. (Users can always override given input.) Parses HTML response code. particularly important response Census APIs provided invalid keys. Removes fips code 72 (Puerto Rico) included fips dataset Puerto Rico included Census API datasets. Changes census key references examples Sys.getenv(“CENSUS_KEY”).","code":""}]
